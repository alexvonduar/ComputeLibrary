<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/color_convert.cl File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('color__convert_8cl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">color_convert.cl File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="helpers_8h_source.xhtml">helpers.h</a>&quot;</code><br />
</div>
<p><a href="color__convert_8cl_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a2a21de930ca0898bed0a081f40cb4406"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a2a21de930ca0898bed0a081f40cb4406">RGB888_to_RGBA8888_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *output_ptr, uint output_stride_x, uint output_step_x, uint output_stride_y, uint output_step_y, uint output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a2a21de930ca0898bed0a081f40cb4406"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an RGB888 image to RGBX8888.  <a href="#a2a21de930ca0898bed0a081f40cb4406">More...</a><br /></td></tr>
<tr class="separator:a2a21de930ca0898bed0a081f40cb4406"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae424d47188a7fffd83a3a9d0c0e1ce6e"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#ae424d47188a7fffd83a3a9d0c0e1ce6e">RGBA8888_to_RGB888_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *output_ptr, uint output_stride_x, uint output_step_x, uint output_stride_y, uint output_step_y, uint output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:ae424d47188a7fffd83a3a9d0c0e1ce6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an RGB888 image to RGBX8888.  <a href="#ae424d47188a7fffd83a3a9d0c0e1ce6e">More...</a><br /></td></tr>
<tr class="separator:ae424d47188a7fffd83a3a9d0c0e1ce6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b20f3b21bfb3e5ef177eb946e3c905f"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a0b20f3b21bfb3e5ef177eb946e3c905f">UYVY422_to_RGB888_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *output_ptr, uint output_stride_x, uint output_step_x, uint output_stride_y, uint output_step_y, uint output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a0b20f3b21bfb3e5ef177eb946e3c905f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UYVY422 image to RGB888 using BT709 color space.  <a href="#a0b20f3b21bfb3e5ef177eb946e3c905f">More...</a><br /></td></tr>
<tr class="separator:a0b20f3b21bfb3e5ef177eb946e3c905f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22e98db2ca5538961967bdbaa19754b3"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a22e98db2ca5538961967bdbaa19754b3">UYVY422_to_RGBA8888_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *output_ptr, uint output_stride_x, uint output_step_x, uint output_stride_y, uint output_step_y, uint output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a22e98db2ca5538961967bdbaa19754b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UYVY422 image to RGBX8888 using BT709 color space.  <a href="#a22e98db2ca5538961967bdbaa19754b3">More...</a><br /></td></tr>
<tr class="separator:a22e98db2ca5538961967bdbaa19754b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a694c56c3d1dd37a2773e650ab8e410b2"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a694c56c3d1dd37a2773e650ab8e410b2">YUYV422_to_RGB888_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *output_ptr, uint output_stride_x, uint output_step_x, uint output_stride_y, uint output_step_y, uint output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a694c56c3d1dd37a2773e650ab8e410b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a YUYV422 image to RGB888 using BT709 color space.  <a href="#a694c56c3d1dd37a2773e650ab8e410b2">More...</a><br /></td></tr>
<tr class="separator:a694c56c3d1dd37a2773e650ab8e410b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0be9d15196e78ed50afdbfa93a11662"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#ab0be9d15196e78ed50afdbfa93a11662">YUYV422_to_RGBA8888_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *output_ptr, uint output_stride_x, uint output_step_x, uint output_stride_y, uint output_step_y, uint output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:ab0be9d15196e78ed50afdbfa93a11662"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a YUYV422 image to RGBX8888 using BT709 color space.  <a href="#ab0be9d15196e78ed50afdbfa93a11662">More...</a><br /></td></tr>
<tr class="separator:ab0be9d15196e78ed50afdbfa93a11662"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa07d313ff115012737d4b522efc6079f"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#aa07d313ff115012737d4b522efc6079f">RGB888_to_NV12_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *luma_ptr, uint luma_stride_x, uint luma_step_x, uint luma_stride_y, uint luma_step_y, uint luma_offset_first_element_in_bytes, __global uchar *uv_ptr, uint uv_stride_x, uint uv_step_x, uint uv_stride_y, uint uv_step_y, uint uv_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:aa07d313ff115012737d4b522efc6079f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a RGB image to NV12 using BT709 color space.  <a href="#aa07d313ff115012737d4b522efc6079f">More...</a><br /></td></tr>
<tr class="separator:aa07d313ff115012737d4b522efc6079f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02037a65e2f5ec0579b8ed8efc33ff18"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a02037a65e2f5ec0579b8ed8efc33ff18">NV12_to_RGB888_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *rgb_output_ptr, uint rgb_output_stride_x, uint rgb_output_step_x, uint rgb_output_stride_y, uint rgb_output_step_y, uint rgb_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a02037a65e2f5ec0579b8ed8efc33ff18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV12 image to RGB888.  <a href="#a02037a65e2f5ec0579b8ed8efc33ff18">More...</a><br /></td></tr>
<tr class="separator:a02037a65e2f5ec0579b8ed8efc33ff18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917c100f2da4a0e773bb63dd4f87de0b"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a917c100f2da4a0e773bb63dd4f87de0b">RGB888_to_YUV444_bt709</a> (__global uchar *rgb_input_ptr, uint rgb_input_stride_x, uint rgb_input_step_x, uint rgb_input_stride_y, uint rgb_input_step_y, uint rgb_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a917c100f2da4a0e773bb63dd4f87de0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a RGB image to YUV444 using BT709 color space.  <a href="#a917c100f2da4a0e773bb63dd4f87de0b">More...</a><br /></td></tr>
<tr class="separator:a917c100f2da4a0e773bb63dd4f87de0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e87467985f2b64c5aaf073ee5c64267"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a0e87467985f2b64c5aaf073ee5c64267">RGB888_to_IYUV_bt709</a> (__global uchar *rgb_input_ptr, uint rgb_input_stride_x, uint rgb_input_step_x, uint rgb_input_stride_y, uint rgb_input_step_y, uint rgb_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a0e87467985f2b64c5aaf073ee5c64267"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a RGB image to IYUV using BT709 color space.  <a href="#a0e87467985f2b64c5aaf073ee5c64267">More...</a><br /></td></tr>
<tr class="separator:a0e87467985f2b64c5aaf073ee5c64267"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee9a7e06c86387d2a46aad341fa940d0"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#aee9a7e06c86387d2a46aad341fa940d0">RGBA8888_to_YUV444_bt709</a> (__global uchar *rgba_input_ptr, uint rgba_input_stride_x, uint rgba_input_step_x, uint rgba_input_stride_y, uint rgba_input_step_y, uint rgba_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:aee9a7e06c86387d2a46aad341fa940d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a RGBA image to YUV444 using BT709 color space.  <a href="#aee9a7e06c86387d2a46aad341fa940d0">More...</a><br /></td></tr>
<tr class="separator:aee9a7e06c86387d2a46aad341fa940d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ef9b466943c743b2a0f2865a70f741a"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a9ef9b466943c743b2a0f2865a70f741a">RGBA8888_to_NV12_bt709</a> (__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *uv_output_ptr, uint uv_output_stride_x, uint uv_output_step_x, uint uv_output_stride_y, uint uv_output_step_y, uint uv_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a9ef9b466943c743b2a0f2865a70f741a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a RGBA image to NV12 using BT709 color space.  <a href="#a9ef9b466943c743b2a0f2865a70f741a">More...</a><br /></td></tr>
<tr class="separator:a9ef9b466943c743b2a0f2865a70f741a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18ef3b2b70de9af3e4386b2a07f2cd36"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a18ef3b2b70de9af3e4386b2a07f2cd36">RGBA8888_to_IYUV_bt709</a> (__global uchar *rgba_input_ptr, uint rgba_input_stride_x, uint rgba_input_step_x, uint rgba_input_stride_y, uint rgba_input_step_y, uint rgba_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a18ef3b2b70de9af3e4386b2a07f2cd36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a RGBA image to IYUV using BT709 color space.  <a href="#a18ef3b2b70de9af3e4386b2a07f2cd36">More...</a><br /></td></tr>
<tr class="separator:a18ef3b2b70de9af3e4386b2a07f2cd36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84880a0b48a6d4ff812b07ef7dcf0eda"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a84880a0b48a6d4ff812b07ef7dcf0eda">NV12_to_RGBA8888_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *rgb_output_ptr, uint rgb_output_stride_x, uint rgb_output_step_x, uint rgb_output_stride_y, uint rgb_output_step_y, uint rgb_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a84880a0b48a6d4ff812b07ef7dcf0eda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV12 image to RGB8888.  <a href="#a84880a0b48a6d4ff812b07ef7dcf0eda">More...</a><br /></td></tr>
<tr class="separator:a84880a0b48a6d4ff812b07ef7dcf0eda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fb5e7276f3da6febe4e9c48fe085169"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a8fb5e7276f3da6febe4e9c48fe085169">NV12_to_IYUV_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a8fb5e7276f3da6febe4e9c48fe085169"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV12 image to IYUV.  <a href="#a8fb5e7276f3da6febe4e9c48fe085169">More...</a><br /></td></tr>
<tr class="separator:a8fb5e7276f3da6febe4e9c48fe085169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c05435371a2cb1b2782d0a434407150"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a2c05435371a2cb1b2782d0a434407150">NV12_to_YUV444_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a2c05435371a2cb1b2782d0a434407150"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV12 image to YUV444.  <a href="#a2c05435371a2cb1b2782d0a434407150">More...</a><br /></td></tr>
<tr class="separator:a2c05435371a2cb1b2782d0a434407150"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57f0e4cc61a99718caaaaab82d393009"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a57f0e4cc61a99718caaaaab82d393009">NV21_to_RGB888_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *rgb_output_ptr, uint rgb_output_stride_x, uint rgb_output_step_x, uint rgb_output_stride_y, uint rgb_output_step_y, uint rgb_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a57f0e4cc61a99718caaaaab82d393009"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV21 image to RGB888.  <a href="#a57f0e4cc61a99718caaaaab82d393009">More...</a><br /></td></tr>
<tr class="separator:a57f0e4cc61a99718caaaaab82d393009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad96db99a88669713407e91c036b06df2"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#ad96db99a88669713407e91c036b06df2">NV21_to_RGBA8888_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *rgba_output_ptr, uint rgba_output_stride_x, uint rgba_output_step_x, uint rgba_output_stride_y, uint rgba_output_step_y, uint rgba_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:ad96db99a88669713407e91c036b06df2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV12 image to RGB8888.  <a href="#ad96db99a88669713407e91c036b06df2">More...</a><br /></td></tr>
<tr class="separator:ad96db99a88669713407e91c036b06df2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd3f622e7d731ae70306266b334ff33b"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#abd3f622e7d731ae70306266b334ff33b">NV21_to_YUV444_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:abd3f622e7d731ae70306266b334ff33b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV21 image to YUV444.  <a href="#abd3f622e7d731ae70306266b334ff33b">More...</a><br /></td></tr>
<tr class="separator:abd3f622e7d731ae70306266b334ff33b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfdf02c3ab4893afc7e05afc3a950555"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#acfdf02c3ab4893afc7e05afc3a950555">NV21_to_IYUV_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *uv_input_ptr, uint uv_input_stride_x, uint uv_input_step_x, uint uv_input_stride_y, uint uv_input_step_y, uint uv_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:acfdf02c3ab4893afc7e05afc3a950555"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an NV21 image to IYUV.  <a href="#acfdf02c3ab4893afc7e05afc3a950555">More...</a><br /></td></tr>
<tr class="separator:acfdf02c3ab4893afc7e05afc3a950555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8946fa606d523038e103e6b4ceb42e56"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a8946fa606d523038e103e6b4ceb42e56">UYVY422_to_IYUV_bt709</a> (__global uchar *uyvy_input_ptr, uint uyvy_input_stride_x, uint uyvy_input_step_x, uint uyvy_input_stride_y, uint uyvy_input_step_y, uint uyvy_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a8946fa606d523038e103e6b4ceb42e56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UYVY image to IYUV using BT709 color space.  <a href="#a8946fa606d523038e103e6b4ceb42e56">More...</a><br /></td></tr>
<tr class="separator:a8946fa606d523038e103e6b4ceb42e56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f241a3b4a3fbd337c6fe03cd4e61877"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a3f241a3b4a3fbd337c6fe03cd4e61877">YUYV422_to_IYUV_bt709</a> (__global uchar *yuyv_input_ptr, uint yuyv_input_stride_x, uint yuyv_input_step_x, uint yuyv_input_stride_y, uint yuyv_input_step_y, uint yuyv_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a3f241a3b4a3fbd337c6fe03cd4e61877"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a YUYV image to IYUV using BT709 color space.  <a href="#a3f241a3b4a3fbd337c6fe03cd4e61877">More...</a><br /></td></tr>
<tr class="separator:a3f241a3b4a3fbd337c6fe03cd4e61877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d2fa0803ea5b0e979dc124a2606564"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a40d2fa0803ea5b0e979dc124a2606564">IYUV_to_RGB888_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *u_input_ptr, uint u_input_stride_x, uint u_input_step_x, uint u_input_stride_y, uint u_input_step_y, uint u_input_offset_first_element_in_bytes, __global uchar *v_input_ptr, uint v_input_stride_x, uint v_input_step_x, uint v_input_stride_y, uint v_input_step_y, uint v_input_offset_first_element_in_bytes, __global uchar *rgb_output_ptr, uint rgb_output_stride_x, uint rgb_output_step_x, uint rgb_output_stride_y, uint rgb_output_step_y, uint rgb_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a40d2fa0803ea5b0e979dc124a2606564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an IYUV image to RGB888.  <a href="#a40d2fa0803ea5b0e979dc124a2606564">More...</a><br /></td></tr>
<tr class="separator:a40d2fa0803ea5b0e979dc124a2606564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a8a4562d5b32de4a1d1352712d9c782"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a7a8a4562d5b32de4a1d1352712d9c782">IYUV_to_RGBA8888_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *u_input_ptr, uint u_input_stride_x, uint u_input_step_x, uint u_input_stride_y, uint u_input_step_y, uint u_input_offset_first_element_in_bytes, __global uchar *v_input_ptr, uint v_input_stride_x, uint v_input_step_x, uint v_input_stride_y, uint v_input_step_y, uint v_input_offset_first_element_in_bytes, __global uchar *rgba_output_ptr, uint rgba_output_stride_x, uint rgba_output_step_x, uint rgba_output_stride_y, uint rgba_output_step_y, uint rgba_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a7a8a4562d5b32de4a1d1352712d9c782"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an IYUV image to RGB8888.  <a href="#a7a8a4562d5b32de4a1d1352712d9c782">More...</a><br /></td></tr>
<tr class="separator:a7a8a4562d5b32de4a1d1352712d9c782"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a718147fe7bf9f1bce18e07c2cfcc472c"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a718147fe7bf9f1bce18e07c2cfcc472c">IYUV_to_YUV444_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *u_input_ptr, uint u_input_stride_x, uint u_input_step_x, uint u_input_stride_y, uint u_input_step_y, uint u_input_offset_first_element_in_bytes, __global uchar *v_input_ptr, uint v_input_stride_x, uint v_input_step_x, uint v_input_stride_y, uint v_input_step_y, uint v_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *u_output_ptr, uint u_output_stride_x, uint u_output_step_x, uint u_output_stride_y, uint u_output_step_y, uint u_output_offset_first_element_in_bytes, __global uchar *v_output_ptr, uint v_output_stride_x, uint v_output_step_x, uint v_output_stride_y, uint v_output_step_y, uint v_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a718147fe7bf9f1bce18e07c2cfcc472c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an IYUV image to YUV444.  <a href="#a718147fe7bf9f1bce18e07c2cfcc472c">More...</a><br /></td></tr>
<tr class="separator:a718147fe7bf9f1bce18e07c2cfcc472c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47fa13a636a45eaa621bdbcbb206895f"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a47fa13a636a45eaa621bdbcbb206895f">IYUV_to_NV12_bt709</a> (__global uchar *luma_input_ptr, uint luma_input_stride_x, uint luma_input_step_x, uint luma_input_stride_y, uint luma_input_step_y, uint luma_input_offset_first_element_in_bytes, __global uchar *u_input_ptr, uint u_input_stride_x, uint u_input_step_x, uint u_input_stride_y, uint u_input_step_y, uint u_input_offset_first_element_in_bytes, __global uchar *v_input_ptr, uint v_input_stride_x, uint v_input_step_x, uint v_input_stride_y, uint v_input_step_y, uint v_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *uv_output_ptr, uint uv_output_stride_x, uint uv_output_step_x, uint uv_output_stride_y, uint uv_output_step_y, uint uv_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a47fa13a636a45eaa621bdbcbb206895f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an IYUV image to NV12.  <a href="#a47fa13a636a45eaa621bdbcbb206895f">More...</a><br /></td></tr>
<tr class="separator:a47fa13a636a45eaa621bdbcbb206895f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d458afddfb19f170cb27a9cc934069"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#aa4d458afddfb19f170cb27a9cc934069">YUYV422_to_NV12_bt709</a> (__global uchar *yuyv_input_ptr, uint yuyv_input_stride_x, uint yuyv_input_step_x, uint yuyv_input_stride_y, uint yuyv_input_step_y, uint yuyv_input_offset_first_element_in_bytes, __global uchar *luma_output_ptr, uint luma_output_stride_x, uint luma_output_step_x, uint luma_output_stride_y, uint luma_output_step_y, uint luma_output_offset_first_element_in_bytes, __global uchar *uv_output_ptr, uint uv_output_stride_x, uint uv_output_step_x, uint uv_output_stride_y, uint uv_output_step_y, uint uv_output_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:aa4d458afddfb19f170cb27a9cc934069"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a YUYV image to NV12 using BT709 color space.  <a href="#aa4d458afddfb19f170cb27a9cc934069">More...</a><br /></td></tr>
<tr class="separator:aa4d458afddfb19f170cb27a9cc934069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a966fe2be85946bbbe2ecad5ad1100d1f"><td class="memItemLeft" align="right" valign="top">__kernel void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="color__convert_8cl.xhtml#a966fe2be85946bbbe2ecad5ad1100d1f">UYVY422_to_NV12_bt709</a> (__global uchar *input_uyvy_ptr, uint input_uyvy_stride_x, uint input_uyvy_step_x, uint input_uyvy_stride_y, uint input_uyvy_step_y, uint input_uyvy_offset_first_element_in_bytes, __global uchar *luma_ptr, uint luma_stride_x, uint luma_step_x, uint luma_stride_y, uint luma_step_y, uint luma_offset_first_element_in_bytes, __global uchar *uv_ptr, uint uv_stride_x, uint uv_step_x, uint uv_stride_y, uint uv_step_y, uint uv_offset_first_element_in_bytes)</td></tr>
<tr class="memdesc:a966fe2be85946bbbe2ecad5ad1100d1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UYVY image to NV12 using BT709 color space.  <a href="#a966fe2be85946bbbe2ecad5ad1100d1f">More...</a><br /></td></tr>
<tr class="separator:a966fe2be85946bbbe2ecad5ad1100d1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a47fa13a636a45eaa621bdbcbb206895f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void IYUV_to_NV12_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an IYUV image to NV12. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_ptr</td><td>Pointer to the source U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_x</td><td>Stride of the source image U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_x</td><td>u_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_y</td><td>u_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source U channel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_ptr</td><td>Pointer to the source V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_x</td><td>Stride of the source image V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_x</td><td>v_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_y</td><td>Stride of the source image V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_y</td><td>v_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image V channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">uv_output_ptr</td><td>Pointer to the destination UV channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_stride_x</td><td>Stride of the destination UV channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_step_x</td><td>uv_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_step_y</td><td>uv_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination UV channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01743">1743</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;{</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_u   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_input);</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_v   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_input);</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_output);</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    <span class="comment">// handle 32 pixels every time, two lines, each line for 16 pixels</span></div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    uchar16 luma_0 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    uchar16 luma_1 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;    uchar8  cb     = vload8(0, in_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    uchar8  cr     = vload8(0, in_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    uchar16 cbcr   = (uchar16)(cb.s0, cr.s0, cb.s1, cr.s1, cb.s2, cr.s2, cb.s3, cr.s3, cb.s4, cr.s4, cb.s5, cr.s5, cb.s6,</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;                               cr.s6, cb.s7, cr.s7);</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    vstore16(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;    vstore16(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    vstore16(cbcr, 0, out_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a40d2fa0803ea5b0e979dc124a2606564"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void IYUV_to_RGB888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgb_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an IYUV image to RGB888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_ptr</td><td>Pointer to the source U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_x</td><td>Stride of the source image U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_x</td><td>u_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_y</td><td>u_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source U channel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_ptr</td><td>Pointer to the source V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_x</td><td>Stride of the source image V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_x</td><td>v_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_y</td><td>Stride of the source image V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_y</td><td>v_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image V channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">rgb_output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_x</td><td>rgb_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_y</td><td>rgb_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01502">1502</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;{</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_u    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_input);</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_v    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_input);</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgb_output);</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <span class="comment">// handle 8 pixels every time, two lines, each line for 4 pixels</span></div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    uchar4 luma_0 = vload4(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    uchar4 luma_1 = vload4(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    uchar4 cbcr   = (uchar4)(vload2(0, in_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>), vload2(0, in_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s1, cbcr.s1) - (char4)(128);</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    char4  cr     = (char4)(cbcr.s2, cbcr.s2, cbcr.s3, cbcr.s3) - (char4)(128);</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    float4 f_r = convert_float4(luma_0) + temp0;</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    float4 f_g = convert_float4(luma_0) + temp1;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    float4 f_b = convert_float4(luma_0) + temp2;</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    uchar4 rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    vstore4(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 8);</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    f_r = convert_float4(luma_1) + temp0;</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    f_g = convert_float4(luma_1) + temp1;</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    f_b = convert_float4(luma_1) + temp2;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;    rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y);</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    vstore4(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y + 8);</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7a8a4562d5b32de4a1d1352712d9c782"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void IYUV_to_RGBA8888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgba_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an IYUV image to RGB8888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_ptr</td><td>Pointer to the source U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_x</td><td>Stride of the source image U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_x</td><td>u_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_y</td><td>u_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source U channel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_ptr</td><td>Pointer to the source V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_x</td><td>Stride of the source image V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_x</td><td>v_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_y</td><td>Stride of the source image V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_y</td><td>v_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image V channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">rgba_output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_step_x</td><td>rgba_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_step_y</td><td>rgba_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01581">1581</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;{</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_u    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_input);</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_v    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_input);</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgba_output);</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <span class="comment">// handle 8 pixels every time, two lines, each line for 4 pixels</span></div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    uchar4 luma_0 = vload4(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;    uchar4 luma_1 = vload4(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    uchar4 cbcr   = (uchar4)(vload2(0, in_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>), vload2(0, in_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s1, cbcr.s1) - (char4)(128);</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    char4  cr     = (char4)(cbcr.s2, cbcr.s2, cbcr.s3, cbcr.s3) - (char4)(128);</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    float4 f_r = convert_float4(luma_0) + temp0;</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    float4 f_g = convert_float4(luma_0) + temp1;</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    float4 f_b = convert_float4(luma_0) + temp2;</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    uchar8 rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    vstore8(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 8);</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    f_r = convert_float4(luma_1) + temp0;</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    f_g = convert_float4(luma_1) + temp1;</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    f_b = convert_float4(luma_1) + temp2;</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgba_output_stride_y);</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    vstore8(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgba_output_stride_y + 8);</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a718147fe7bf9f1bce18e07c2cfcc472c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void IYUV_to_YUV444_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an IYUV image to YUV444. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_ptr</td><td>Pointer to the source U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_x</td><td>Stride of the source image U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_x</td><td>u_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_step_y</td><td>u_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source U channel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_ptr</td><td>Pointer to the source V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_x</td><td>Stride of the source image V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_x</td><td>v_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_stride_y</td><td>Stride of the source image V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_step_y</td><td>v_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image V channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01673">1673</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;{</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_u  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_input);</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_v  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_input);</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    <span class="comment">// handle 32 pixels every time, two lines, each line for 16 pixels</span></div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    uchar16 luma_0 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    uchar16 luma_1 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    uchar8  cb_src = vload8(0, in_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    uchar8  cr_src = vload8(0, in_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;    uchar16 cb     = (uchar16)(cb_src.s0, cb_src.s0, cb_src.s1, cb_src.s1, cb_src.s2, cb_src.s2, cb_src.s3, cb_src.s3,</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;                               cb_src.s4, cb_src.s4, cb_src.s5, cb_src.s5, cb_src.s6, cb_src.s6, cb_src.s7, cb_src.s7);</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;    uchar16 cr = (uchar16)(cr_src.s0, cr_src.s0, cr_src.s1, cr_src.s1, cr_src.s2, cr_src.s2, cr_src.s3, cr_src.s3,</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;                           cr_src.s4, cr_src.s4, cr_src.s5, cr_src.s5, cr_src.s6, cr_src.s6, cr_src.s7, cr_src.s7);</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    vstore16(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    vstore16(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;    vstore16(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    vstore16(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + u_output_stride_y);</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    vstore16(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    vstore16(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + v_output_stride_y);</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8fb5e7276f3da6febe4e9c48fe085169"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV12_to_IYUV_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV12 image to IYUV. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00989">989</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;{</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="comment">// handle 32 pixels every time, two lines, each line for 16 pixels</span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    uchar16 luma_0 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    uchar16 luma_1 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    uchar16 cbcr   = vload16(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    uchar8  cb     = (uchar8)(cbcr.s0, cbcr.s2, cbcr.s4, cbcr.s6, cbcr.s8, cbcr.sa, cbcr.sc, cbcr.se);</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    uchar8  cr     = (uchar8)(cbcr.s1, cbcr.s3, cbcr.s5, cbcr.s7, cbcr.s9, cbcr.sb, cbcr.sd, cbcr.sf);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    vstore16(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    vstore16(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    vstore8(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    vstore8(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a02037a65e2f5ec0579b8ed8efc33ff18"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV12_to_RGB888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgb_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV12 image to RGB888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">rgb_output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_x</td><td>rgb_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00450">450</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;{</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_luma = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgb_output);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="comment">// handle 8 pixels every time, two lines, each line for 4 pixels</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    uchar4 luma_0 = vload4(0, in_luma.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    uchar4 luma_1 = vload4(0, in_luma.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    uchar4 cbcr   = vload4(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    char4  cr     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    float4 f_r = convert_float4(luma_0) + temp0;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    float4 f_g = convert_float4(luma_0) + temp1;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    float4 f_b = convert_float4(luma_0) + temp2;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    uchar4 rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    vstore4(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 8);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    f_r = convert_float4(luma_1) + temp0;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    f_g = convert_float4(luma_1) + temp1;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    f_b = convert_float4(luma_1) + temp2;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    vstore4(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y + 8);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a84880a0b48a6d4ff812b07ef7dcf0eda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV12_to_RGBA8888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgb_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV12 image to RGB8888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">rgb_output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_x</td><td>rgb_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_y</td><td>rgb_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00907">907</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;{</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_luma = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgb_output);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    uchar4 luma_0 = vload4(0, in_luma.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    uchar4 luma_1 = vload4(0, in_luma.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    uchar4 cbcr   = vload4(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    char4  cr     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    float4 f_r = convert_float4(luma_0) + temp0;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    float4 f_g = convert_float4(luma_0) + temp1;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    float4 f_b = convert_float4(luma_0) + temp2;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    uchar8 rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    vstore8(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 8);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    f_r = convert_float4(luma_1) + temp0;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    f_g = convert_float4(luma_1) + temp1;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    f_b = convert_float4(luma_1) + temp2;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    vstore8(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y + 8);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2c05435371a2cb1b2782d0a434407150"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV12_to_YUV444_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV12 image to YUV444. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01051">1051</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;{</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="comment">// handle 32 pixels every time, two lines, each line for 16 pixels</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    uchar16 luma_0 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    uchar16 luma_1 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    uchar16 cbcr   = vload16(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    uchar16 cb     = (uchar16)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2, cbcr.s4, cbcr.s4, cbcr.s6, cbcr.s6, cbcr.s8, cbcr.s8,</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                               cbcr.sa, cbcr.sa, cbcr.sc, cbcr.sc, cbcr.se, cbcr.se);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    uchar16 cr = (uchar16)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3, cbcr.s5, cbcr.s5, cbcr.s7, cbcr.s7, cbcr.s9, cbcr.s9,</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                           cbcr.sb, cbcr.sb, cbcr.sd, cbcr.sd, cbcr.sf, cbcr.sf);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    vstore16(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    vstore16(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    vstore16(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    vstore16(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + u_output_stride_y);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    vstore16(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    vstore16(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + v_output_stride_y);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acfdf02c3ab4893afc7e05afc3a950555"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV21_to_IYUV_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV21 image to IYUV. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01325">1325</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;{</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    uchar16 luma_0 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    uchar16 luma_1 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    uchar16 cbcr   = vload16(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    uchar8  cr     = (uchar8)(cbcr.s0, cbcr.s2, cbcr.s4, cbcr.s6, cbcr.s8, cbcr.sa, cbcr.sc, cbcr.se);</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    uchar8  cb     = (uchar8)(cbcr.s1, cbcr.s3, cbcr.s5, cbcr.s7, cbcr.s9, cbcr.sb, cbcr.sd, cbcr.sf);</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    vstore16(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    vstore16(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    vstore8(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    vstore8(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a57f0e4cc61a99718caaaaab82d393009"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV21_to_RGB888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgb_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV21 image to RGB888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">rgb_output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_x</td><td>rgb_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01105">1105</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;{</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y    = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgb_output);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    <span class="comment">// handle 8 pixels every time, two lines, each line for 4 pixels</span></div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    uchar4 luma_0 = vload4(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    uchar4 luma_1 = vload4(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    uchar4 cbcr   = vload4(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    char4  cr     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    char4  cb     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    float4 f_r = convert_float4(luma_0) + temp0;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    float4 f_g = convert_float4(luma_0) + temp1;</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    float4 f_b = convert_float4(luma_0) + temp2;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    uchar4 rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    vstore4(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 8);</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    f_r = convert_float4(luma_1) + temp0;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    f_g = convert_float4(luma_1) + temp1;</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    f_b = convert_float4(luma_1) + temp2;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    vstore4(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_output_stride_y + 8);</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad96db99a88669713407e91c036b06df2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV21_to_RGBA8888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgba_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV12 image to RGB8888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">rgba_output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_step_x</td><td>rgba_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_step_y</td><td>rgba_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01176">1176</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;{</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_luma = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgba_output);</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="comment">// handle 8 pixels every time, two lines, each line for 4 pixels</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    uchar4 luma_0 = vload4(0, in_luma.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    uchar4 luma_1 = vload4(0, in_luma.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    uchar4 cbcr   = vload4(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    char4  cr     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    char4  cb     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    float4 f_r = convert_float4(luma_0) + temp0;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    float4 f_g = convert_float4(luma_0) + temp1;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    float4 f_b = convert_float4(luma_0) + temp2;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    uchar8 rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    vstore8(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 8);</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    f_r = convert_float4(luma_1) + temp0;</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    f_g = convert_float4(luma_1) + temp1;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    f_b = convert_float4(luma_1) + temp2;</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    r_0 = convert_uchar4_sat_rtz(f_r);</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    g_0 = convert_uchar4_sat_rtz(f_g);</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    b_0 = convert_uchar4_sat_rtz(f_b);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    vstore8(rgb_0, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgba_output_stride_y);</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    vstore8(rgb_1, 0, out_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgba_output_stride_y + 8);</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abd3f622e7d731ae70306266b334ff33b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void NV21_to_YUV444_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an NV21 image to YUV444. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_ptr</td><td>Pointer to the source luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_x</td><td>Stride of the luma image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_x</td><td>luma_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_stride_y</td><td>Stride of the source luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_step_y</td><td>luma_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_ptr</td><td>Pointer to the source uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_x</td><td>Stride of the source image uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_x</td><td>uv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_step_y</td><td>uv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01259">1259</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;{</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_input);</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_input);</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="comment">// handle 32 pixels every time, two lines, each line for 16 pixels</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    uchar16 luma_0 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    uchar16 luma_1 = vload16(0, in_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_input_stride_y);</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    uchar16 cbcr   = vload16(0, in_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    uchar16 cr     = (uchar16)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2, cbcr.s4, cbcr.s4, cbcr.s6, cbcr.s6, cbcr.s8, cbcr.s8,</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;                               cbcr.sa, cbcr.sa, cbcr.sc, cbcr.sc, cbcr.se, cbcr.se);</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    uchar16 cb = (uchar16)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3, cbcr.s5, cbcr.s5, cbcr.s7, cbcr.s7, cbcr.s9, cbcr.s9,</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                           cbcr.sb, cbcr.sb, cbcr.sd, cbcr.sd, cbcr.sf, cbcr.sf);</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    vstore16(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    vstore16(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    vstore16(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    vstore16(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + u_output_stride_y);</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    vstore16(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    vstore16(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + v_output_stride_y);</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0e87467985f2b64c5aaf073ee5c64267"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGB888_to_IYUV_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgb_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a RGB image to IYUV using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 2), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_step_y</td><td>rgb_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00594">594</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;{</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="comment">// handle 4 pixels every time, two lines, each line for 2 pixels</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgb_input);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="comment">// Read 2 pixel of the first line</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    uchar8 rgb_0 = vload8(0, in_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s3);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s4);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s5);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    short2 i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    vstore2(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="comment">// Read 2 pixel of the second line</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    uchar8 rgb_1 = vload8(0, in_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgb_input_stride_y);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s3);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s4);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s5);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    vstore2(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    *out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> = cbcr.x;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    *out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> = cbcr.y;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa07d313ff115012737d4b522efc6079f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGB888_to_NV12_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a RGB image to NV12 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_step_x</td><td>luma_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_step_y</td><td>luma_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">uv_ptr</td><td>Pointer to the destination uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_stride_x</td><td>Stride of the destination uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_step_x</td><td>uv_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_step_y</td><td>uv_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image uv channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00365">365</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>     = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">// handle 4 pixels every time, two lines, each line for 2 pixels</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// Read 2 pixel of the first line</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    uchar8 rgb_0 = vload8(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s3);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s4);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s5);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    short2 i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    vstore2(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// Read 2 pixel of the second line</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    uchar8 rgb_1 = vload8(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + input_stride_y);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s3);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s4);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s5);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    vstore2(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_stride_y);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    vstore2(cbcr, 0, out_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2a21de930ca0898bed0a081f40cb4406"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGB888_to_RGBA8888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an RGB888 image to RGBX8888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_x</td><td>output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00044">44</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00242">arm_compute::test::validation::out</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(output);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// handle 16 pixels every time</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    uchar16 rgb_0 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    uchar16 rgb_1 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    uchar16 rgb_2 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 32);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    uchar16 rgba_0 = (uchar16)(rgb_0.s012, 255, rgb_0.s345, 255, rgb_0.s678, 255, rgb_0.s9ab, 255);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    uchar16 rgba_1 = (uchar16)(rgb_0.scde, 255, rgb_0.sf, rgb_1.s01, 255, rgb_1.s234, 255, rgb_1.s567, 255);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    uchar16 rgba_2 = (uchar16)(rgb_1.s89a, 255, rgb_1.sbcd, 255, rgb_1.sef, rgb_2.s0, 255, rgb_2.s123, 255);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    uchar16 rgba_3 = (uchar16)(rgb_2.s456, 255, rgb_2.s789, 255, rgb_2.sabc, 255, rgb_2.sdef, 255);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    vstore16(rgba_0, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    vstore16(rgba_1, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    vstore16(rgba_2, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 32);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    vstore16(rgba_3, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 48);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a917c100f2da4a0e773bb63dd4f87de0b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGB888_to_YUV444_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgb_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgb_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a RGB image to YUV444 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_step_y</td><td>rgb_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgb_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination image V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00528">528</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="comment">// handle 4 pixels every time</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgb_input);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Read 4 pixel</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    uchar16 rgb_0 = vload16(0, in_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    uchar4  r_0   = (uchar4)(rgb_0.s0, rgb_0.s3, rgb_0.s6, rgb_0.s9);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    uchar4  g_0   = (uchar4)(rgb_0.s1, rgb_0.s4, rgb_0.s7, rgb_0.sa);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    uchar4  b_0   = (uchar4)(rgb_0.s2, rgb_0.s5, rgb_0.s8, rgb_0.sb);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    float4 f_y = (float4)(0.0000f) + (float4)(0.2126f) * convert_float4(r_0) + (float4)(0.7152f) * convert_float4(g_0) + (float4)(0.0722f) * convert_float4(b_0);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    float4 f_u = (float4)(0.0000f) - (float4)(0.1146f) * convert_float4(r_0) - (float4)(0.3854f) * convert_float4(g_0) + (float4)(0.5000f) * convert_float4(b_0);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    float4 f_v = (float4)(0.0000f) + (float4)(0.5000f) * convert_float4(r_0) - (float4)(0.4542f) * convert_float4(g_0) - (float4)(0.0458f) * convert_float4(b_0);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    short4 i_y = convert_short4_rtz(f_y);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    short4 i_u = convert_short4_rtz(f_u) + (short4)(128);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    short4 i_v = convert_short4_rtz(f_v) + (short4)(128);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    uchar4 luma_0 = convert_uchar4(max((short4)(0), min(i_y, (short4)(255))));</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    vstore4(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    uchar4 cb_0 = convert_uchar4(max((short4)(0), min(i_u, (short4)(255))));</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    uchar4 cr_0 = convert_uchar4(max((short4)(0), min(i_v, (short4)(255))));</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    vstore4(cb_0, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    vstore4(cr_0, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a18ef3b2b70de9af3e4386b2a07f2cd36"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGBA8888_to_IYUV_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgba_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a RGBA image to IYUV using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 2), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_step_x</td><td>rgba_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_step_y</td><td>rgba_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00826">826</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;{</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="comment">// handle 4 pixels every time, two lines, each line for 2 pixels</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_rgb = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgba_input);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="comment">// Read 2 pixel of the first line</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    uchar8 rgb_0 = vload8(0, in_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s4);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s5);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s6);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    short2 i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    vstore2(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">// Read 2 pixel of the second line</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    uchar8 rgb_1 = vload8(0, in_rgb.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + rgba_input_stride_y);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s4);</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s5);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s6);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    vstore2(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    *out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> = cbcr.x;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    *out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> = cbcr.y;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9ef9b466943c743b2a0f2865a70f741a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGBA8888_to_NV12_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a RGBA image to NV12 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 2), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">uv_output_ptr</td><td>Pointer to the destination uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_stride_x</td><td>Stride of the destination uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_step_x</td><td>uv_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_stride_y</td><td>Stride of the destination image uv channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_step_y</td><td>uv_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image uv channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00742">742</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;{</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>     = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_output);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="comment">// Read 2 pixel of the first line</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    uchar8 rgb_0 = vload8(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s4);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s5);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s6);</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    short2 i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    vstore2(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="comment">// Read 2 pixel of the second line</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    uchar8 rgb_1 = vload8(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + input_stride_y);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s4);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s5);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s6);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    i_y = convert_short2_rtz(f_y);</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    i_u = convert_short2_rtz(f_u) + (short2)(128);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    i_v = convert_short2_rtz(f_v) + (short2)(128);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    vstore2(luma_1, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    vstore2(cbcr, 0, out_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae424d47188a7fffd83a3a9d0c0e1ce6e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGBA8888_to_RGB888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an RGB888 image to RGBX8888. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 16), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_x</td><td>output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00085">85</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00242">arm_compute::test::validation::out</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(output);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// handle 16 pixels every time</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    uchar16 rgba_0 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    uchar16 rgba_1 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    uchar16 rgba_2 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 32);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    uchar16 rgba_3 = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 48);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    uchar16 rgb_0 = (uchar16)(rgba_0.s01245689, rgba_0.sacde, rgba_1.s0124);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    uchar16 rgb_1 = (uchar16)(rgba_1.s5689acde, rgba_2.s01245689);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    uchar16 rgb_2 = (uchar16)(rgba_2.sacde, rgba_3.s01245689, rgba_3.sacde);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    vstore16(rgb_0, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    vstore16(rgb_1, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    vstore16(rgb_2, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 32);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aee9a7e06c86387d2a46aad341fa940d0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void RGBA8888_to_YUV444_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>rgba_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>rgba_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a RGBA image to YUV444 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_step_y</td><td>rgb_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rgba_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination image V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00682">682</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;{</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// handle 4 pixels every time</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_rgba = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(rgba_input);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="comment">// Read 4 pixel</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    uchar16 rgb_0 = vload16(0, in_rgba.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    uchar4  r_0   = (uchar4)(rgb_0.s0, rgb_0.s4, rgb_0.s8, rgb_0.sc);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    uchar4  g_0   = (uchar4)(rgb_0.s1, rgb_0.s5, rgb_0.s9, rgb_0.sd);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    uchar4  b_0   = (uchar4)(rgb_0.s2, rgb_0.s6, rgb_0.sa, rgb_0.se);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    float4 f_y = (float4)(0.0000f) + (float4)(0.2126f) * convert_float4(r_0) + (float4)(0.7152f) * convert_float4(g_0) + (float4)(0.0722f) * convert_float4(b_0);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    float4 f_u = (float4)(0.0000f) - (float4)(0.1146f) * convert_float4(r_0) - (float4)(0.3854f) * convert_float4(g_0) + (float4)(0.5000f) * convert_float4(b_0);</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    float4 f_v = (float4)(0.0000f) + (float4)(0.5000f) * convert_float4(r_0) - (float4)(0.4542f) * convert_float4(g_0) - (float4)(0.0458f) * convert_float4(b_0);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    short4 i_y = convert_short4(f_y);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    short4 i_u = convert_short4(f_u) + (short4)(128);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    short4 i_v = convert_short4(f_v) + (short4)(128);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    uchar4 luma_0 = convert_uchar4_sat(max((short4)(0), min(i_y, (short4)(255))));</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    vstore4(luma_0, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    uchar4 cb_0 = convert_uchar4_sat(max((short4)(0), min(i_u, (short4)(255))));</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    uchar4 cr_0 = convert_uchar4_sat(max((short4)(0), min(i_v, (short4)(255))));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    vstore4(cb_0, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    vstore4(cr_0, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8946fa606d523038e103e6b4ceb42e56"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void UYVY422_to_IYUV_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uyvy_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uyvy_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uyvy_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uyvy_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uyvy_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uyvy_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a UYVY image to IYUV using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">uyvy_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uyvy_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uyvy_input_step_x</td><td>uyvy_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uyvy_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uyvy_input_step_y</td><td>uyvy_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uyvy_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01381">1381</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;{</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_uyvy = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uyvy_input);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    <span class="comment">// handle 16 pixels every time, each line 8 pixels</span></div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    uchar16 uyvy = vload16(0, in_uyvy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    uchar8  luma = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    ushort4 cb_0 = (ushort4)(uyvy.s0, uyvy.s4, uyvy.s8, uyvy.sc);</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    ushort4 cr_0 = (ushort4)(uyvy.s2, uyvy.s6, uyvy.sa, uyvy.se);</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    vstore8(luma, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    uyvy         = vload16(0, in_uyvy.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + uyvy_input_stride_y);</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    luma         = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    ushort4 cb_1 = (ushort4)(uyvy.s0, uyvy.s4, uyvy.s8, uyvy.sc);</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    ushort4 cr_1 = (ushort4)(uyvy.s2, uyvy.s6, uyvy.sa, uyvy.se);</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    vstore8(luma, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    uchar4 cb = convert_uchar4((cb_0 + cb_1) / (ushort4)(2));</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    uchar4 cr = convert_uchar4((cr_0 + cr_1) / (ushort4)(2));</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    vstore4(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    vstore4(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a966fe2be85946bbbe2ecad5ad1100d1f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void UYVY422_to_NV12_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_uyvy_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_uyvy_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_uyvy_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_uyvy_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_uyvy_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_uyvy_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a UYVY image to NV12 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 4), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_uyvy_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_uyvy_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_uyvy_step_x</td><td>input_uyvy_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_uyvy_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_uyvy_step_y</td><td>input_uyvy_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_uyvy_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_step_x</td><td>luma_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_step_y</td><td>luma_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">uv_ptr</td><td>Pointer to the destination uv channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_stride_x</td><td>Stride of the destination uv channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_step_x</td><td>uv_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_step_y</td><td>uv_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image uv channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01843">1843</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;{</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>     = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input_uyvy);</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma);</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_uv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv);</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;    <span class="comment">// handle 16 pixels every time, each line 8 pixels</span></div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;    <span class="keyword">const</span> uchar16 uyvy_t = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;    vstore8(uyvy_t.s13579bdf, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    <span class="keyword">const</span> uchar16 uyvy_b = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + input_uyvy_stride_y);</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;    vstore8(uyvy_b.s13579bdf, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_stride_y);</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;    <span class="keyword">const</span> ushort8 cbcr_t = (ushort8)(uyvy_t.s0, uyvy_t.s2, uyvy_t.s4, uyvy_t.s6, uyvy_t.s8, uyvy_t.sa, uyvy_t.sc, uyvy_t.se);</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    <span class="keyword">const</span> ushort8 cbcr_b = (ushort8)(uyvy_b.s0, uyvy_b.s2, uyvy_b.s4, uyvy_b.s6, uyvy_b.s8, uyvy_b.sa, uyvy_b.sc, uyvy_b.se);</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;    <span class="keyword">const</span> uchar8  cbcr   = convert_uchar8((cbcr_t + cbcr_b) / (ushort8)(2));</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    vstore8(cbcr, 0, out_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0b20f3b21bfb3e5ef177eb946e3c905f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void UYVY422_to_RGB888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a UYVY422 image to RGB888 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_x</td><td>output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00124">124</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="_color_convert_helper_8h_source.xhtml#l00040">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a>, <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00039">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00038">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00242">arm_compute::test::validation::out</a>, <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00037">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(output);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// handle 8 pixels every time</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    uchar16 uyvy = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    uchar8 luma = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    char8  cb   = (char8)(uyvy.s0, uyvy.s0, uyvy.s4, uyvy.s4, uyvy.s8, uyvy.s8, uyvy.sc, uyvy.sc) - (char8)(128);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    char8  cr   = (char8)(uyvy.s2, uyvy.s2, uyvy.s6, uyvy.s6, uyvy.sa, uyvy.sa, uyvy.se, uyvy.se) - (char8)(128);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">red_coef_bt709</a>    = (float8)(1.5748f);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">green_coef_bt709</a>  = (float8)(-0.1873f);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">green_coef2_bt709</a> = (float8)(-0.4681f);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">blue_coef_bt709</a>   = (float8)(1.8556f);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    float8 lumav             = convert_float8(luma);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    float8 f_r = red_coef_bt709 * convert_float8(cr);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    float8 f_b = blue_coef_bt709 * convert_float8(cb);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    f_r += lumav;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    f_g += lumav;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    f_b += lumav;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    uchar16 rgb_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2, b_0.s2,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                              r_0.s3, g_0.s3, b_0.s3, r_0.s4, g_0.s4, b_0.s4, r_0.s5);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    uchar8 rgb_1 = (uchar8)(g_0.s5, b_0.s5, r_0.s6, g_0.s6, b_0.s6, r_0.s7, g_0.s7, b_0.s7);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    vstore16(rgb_0, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    vstore8(rgb_1, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ab7d52900468f442e85c01d73722d181c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a></div><div class="ttdeci">constexpr float blue_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00040">ColorConvertHelper.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a5e59bd8be31e871da2db7572e8b788ce"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a></div><div class="ttdeci">constexpr float green_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00038">ColorConvertHelper.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a27e073d020236f5a325762985b10f8d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a></div><div class="ttdeci">constexpr float green_coef2_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00039">ColorConvertHelper.h:39</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ac3138daaa2a074986406b22ec6f3d909"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a></div><div class="ttdeci">constexpr float red_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00037">ColorConvertHelper.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a22e98db2ca5538961967bdbaa19754b3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void UYVY422_to_RGBA8888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a UYVY422 image to RGBX8888 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_x</td><td>output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00182">182</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="_color_convert_helper_8h_source.xhtml#l00040">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a>, <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00039">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00038">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00242">arm_compute::test::validation::out</a>, <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00037">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(output);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// handle 8 pixels every time</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    uchar16 uyvy = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    uchar8 luma = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    char8  cb   = (char8)(uyvy.s0, uyvy.s0, uyvy.s4, uyvy.s4, uyvy.s8, uyvy.s8, uyvy.sc, uyvy.sc) - (char8)(128);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    char8  cr   = (char8)(uyvy.s2, uyvy.s2, uyvy.s6, uyvy.s6, uyvy.sa, uyvy.sa, uyvy.se, uyvy.se) - (char8)(128);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">red_coef_bt709</a>    = (float8)(1.5748f);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">green_coef_bt709</a>  = (float8)(-0.1873f);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">green_coef2_bt709</a> = (float8)(-0.4681f);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">blue_coef_bt709</a>   = (float8)(1.8556f);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    float8 lumav             = convert_float8(luma);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    float8 f_r = red_coef_bt709 * convert_float8(cr);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    float8 f_b = blue_coef_bt709 * convert_float8(cb);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    f_r += lumav;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    f_g += lumav;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    f_b += lumav;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    uchar16 rgba_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                               r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    uchar16 rgba_1 = (uchar16)(r_0.s4, g_0.s4, b_0.s4, 255, r_0.s5, g_0.s5, b_0.s5, 255,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                               r_0.s6, g_0.s6, b_0.s6, 255, r_0.s7, g_0.s7, b_0.s7, 255);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    vstore16(rgba_0, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    vstore16(rgba_1, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ab7d52900468f442e85c01d73722d181c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a></div><div class="ttdeci">constexpr float blue_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00040">ColorConvertHelper.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a5e59bd8be31e871da2db7572e8b788ce"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a></div><div class="ttdeci">constexpr float green_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00038">ColorConvertHelper.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a27e073d020236f5a325762985b10f8d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a></div><div class="ttdeci">constexpr float green_coef2_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00039">ColorConvertHelper.h:39</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ac3138daaa2a074986406b22ec6f3d909"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a></div><div class="ttdeci">constexpr float red_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00037">ColorConvertHelper.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3f241a3b4a3fbd337c6fe03cd4e61877"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void YUYV422_to_IYUV_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>yuyv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>u_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>u_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>v_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>v_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a YUYV image to IYUV using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_step_x</td><td>yuyv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_step_y</td><td>yuyv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">u_output_ptr</td><td>Pointer to the destination U channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_x</td><td>Stride of the destination U channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_x</td><td>u_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_stride_y</td><td>Stride of the destination image U channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_step_y</td><td>u_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">u_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination U channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">v_output_ptr</td><td>Pointer to the destination V channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_x</td><td>Stride of the destination V channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_x</td><td>v_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_stride_y</td><td>Stride of the destination V channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_step_y</td><td>v_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination V channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01442">1442</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;{</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_yuyv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(yuyv_input);</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_u   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(u_output);</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_v   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(v_output);</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    <span class="comment">// handle 16 pixels every time, each line 8 pixels</span></div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    uchar16 yuyv = vload16(0, in_yuyv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    uchar8  luma = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    ushort4 cb_0 = (ushort4)(yuyv.s1, yuyv.s5, yuyv.s9, yuyv.sd);</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    ushort4 cr_0 = (ushort4)(yuyv.s3, yuyv.s7, yuyv.sb, yuyv.sf);</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    vstore8(luma, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    yuyv         = vload16(0, in_yuyv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + yuyv_input_stride_y);</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    luma         = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    ushort4 cb_1 = (ushort4)(yuyv.s1, yuyv.s5, yuyv.s9, yuyv.sd);</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    ushort4 cr_1 = (ushort4)(yuyv.s3, yuyv.s7, yuyv.sb, yuyv.sf);</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    vstore8(luma, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    uchar4 cb = convert_uchar4((cb_0 + cb_1) / (ushort4)(2));</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    uchar4 cr = convert_uchar4((cr_0 + cr_1) / (ushort4)(2));</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    vstore4(cb, 0, out_u.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    vstore4(cr, 0, out_v.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa4d458afddfb19f170cb27a9cc934069"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void YUYV422_to_NV12_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>yuyv_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>yuyv_input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>luma_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>luma_output_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>uv_output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>uv_output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a YUYV image to NV12 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_step_x</td><td>yuyv_input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_step_y</td><td>yuyv_input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">yuyv_input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">luma_output_ptr</td><td>Pointer to the destination luma channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_x</td><td>Stride of the destination luma channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_x</td><td>luma_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_stride_y</td><td>Stride of the destination image luma channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_step_y</td><td>luma_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">luma_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination luma channel </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">uv_output_ptr</td><td>Pointer to the destination UV channel. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_stride_x</td><td>Stride of the destination UV channel in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_step_x</td><td>uv_output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_stride_y</td><td>Stride of the destination image UV channel in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_step_y</td><td>uv_output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">uv_output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination UV channel </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l01794">1794</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, and <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>.</p>
<div class="fragment"><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;{</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> in_yuyv = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(yuyv_input);</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_y   = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(luma_output);</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> out_uv  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(uv_output);</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    <span class="comment">// handle 16 pixels every time, each line 8 pixels</span></div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    uchar16 yuyv   = vload16(0, in_yuyv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    ushort8 cbcr_0 = (ushort8)(yuyv.s1, yuyv.s3, yuyv.s5, yuyv.s7, yuyv.s9, yuyv.sb, yuyv.sd, yuyv.sf);</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;    uchar8  luma   = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    vstore8(luma, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    yuyv           = vload16(0, in_yuyv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + yuyv_input_stride_y);</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;    ushort8 cbcr_1 = (ushort8)(yuyv.s1, yuyv.s3, yuyv.s5, yuyv.s7, yuyv.s9, yuyv.sb, yuyv.sd, yuyv.sf);</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    luma           = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;    vstore8(luma, 0, out_y.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + luma_output_stride_y);</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;    uchar8 cbcr = convert_uchar8((cbcr_0 + cbcr_1) / (ushort8)(2));</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    vstore8(cbcr, 0, out_uv.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a694c56c3d1dd37a2773e650ab8e410b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void YUYV422_to_RGB888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a YUYV422 image to RGB888 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_x</td><td>output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00241">241</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="_color_convert_helper_8h_source.xhtml#l00040">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a>, <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00039">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00038">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00242">arm_compute::test::validation::out</a>, <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00037">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(output);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// handle 8 pixels every time</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    uchar16 uyvy = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    uchar8 luma = (uchar8)(uyvy.s0, uyvy.s2, uyvy.s4, uyvy.s6, uyvy.s8, uyvy.sa, uyvy.sc, uyvy.se);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    char8  cb   = (char8)(uyvy.s1, uyvy.s1, uyvy.s5, uyvy.s5, uyvy.s9, uyvy.s9, uyvy.sd, uyvy.sd) - (char8)(128);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    char8  cr   = (char8)(uyvy.s3, uyvy.s3, uyvy.s7, uyvy.s7, uyvy.sb, uyvy.sb, uyvy.sf, uyvy.sf) - (char8)(128);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">red_coef_bt709</a>    = (float8)(1.5748f);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">green_coef_bt709</a>  = (float8)(-0.1873f);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">green_coef2_bt709</a> = (float8)(-0.4681f);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">blue_coef_bt709</a>   = (float8)(1.8556f);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    float8 lumav             = convert_float8(luma);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    float8 f_r = red_coef_bt709 * convert_float8(cr);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    float8 f_b = blue_coef_bt709 * convert_float8(cb);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    f_r += lumav;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    f_g += lumav;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    f_b += lumav;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    uchar16 rgb_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2, b_0.s2,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                              r_0.s3, g_0.s3, b_0.s3, r_0.s4, g_0.s4, b_0.s4, r_0.s5);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    uchar8 rgb_1 = (uchar8)(g_0.s5, b_0.s5, r_0.s6, g_0.s6, b_0.s6, r_0.s7, g_0.s7, b_0.s7);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    vstore16(rgb_0, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    vstore8(rgb_1, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ab7d52900468f442e85c01d73722d181c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a></div><div class="ttdeci">constexpr float blue_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00040">ColorConvertHelper.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a5e59bd8be31e871da2db7572e8b788ce"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a></div><div class="ttdeci">constexpr float green_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00038">ColorConvertHelper.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a27e073d020236f5a325762985b10f8d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a></div><div class="ttdeci">constexpr float green_coef2_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00039">ColorConvertHelper.h:39</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ac3138daaa2a074986406b22ec6f3d909"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a></div><div class="ttdeci">constexpr float red_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00037">ColorConvertHelper.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab0be9d15196e78ed50afdbfa93a11662"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">__kernel void YUYV422_to_RGBA8888_bt709 </td>
          <td>(</td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>input_offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__global uchar *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_step_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>output_offset_first_element_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a YUYV422 image to RGBX8888 using BT709 color space. </p>
<p>Global Workgroup Size [ DIV_CEIL(width, 8), height ] No offset.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_ptr</td><td>Pointer to the source image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_x</td><td>Stride of the source image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_x</td><td>input_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_stride_y</td><td>Stride of the source image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_step_y</td><td>input_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset_first_element_in_bytes</td><td>The offset of the first element in the source image </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_ptr</td><td>Pointer to the destination image. Supported Format: U8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_x</td><td>Stride of the destination image in X dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_x</td><td>output_stride_x * number of elements along X processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_stride_y</td><td>Stride of the destination image in Y dimension (in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_step_y</td><td>output_stride_y * number of elements along Y processed per workitem(in bytes) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_offset_first_element_in_bytes</td><td>The offset of the first element in the destination image </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="color__convert_8cl_source.xhtml#l00299">299</a> of file <a class="el" href="color__convert_8cl_source.xhtml">color_convert.cl</a>.</p>

<p>References <a class="el" href="_color_convert_helper_8h_source.xhtml#l00040">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a>, <a class="el" href="helpers_8h_source.xhtml#l00112">CONVERT_TO_IMAGE_STRUCT</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00039">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00038">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00241">arm_compute::test::validation::in</a>, <a class="el" href="_c_l_2_winograd_8cpp_source.xhtml#l00242">arm_compute::test::validation::out</a>, <a class="el" href="helpers_8h_source.xhtml#l00152">Image::ptr</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00037">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a>.</p>
<div class="fragment"><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">in</a>  = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(input);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a> = <a class="code" href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(output);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// handle 8 pixels every time</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    uchar16 uyvy = vload16(0, in.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    uchar8 luma = (uchar8)(uyvy.s0, uyvy.s2, uyvy.s4, uyvy.s6, uyvy.s8, uyvy.sa, uyvy.sc, uyvy.se);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    char8  cb   = (char8)(uyvy.s1, uyvy.s1, uyvy.s5, uyvy.s5, uyvy.s9, uyvy.s9, uyvy.sd, uyvy.sd) - (char8)(128);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    char8  cr   = (char8)(uyvy.s3, uyvy.s3, uyvy.s7, uyvy.s7, uyvy.sb, uyvy.sb, uyvy.sf, uyvy.sf) - (char8)(128);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">red_coef_bt709</a>    = (float8)(1.5748f);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">green_coef_bt709</a>  = (float8)(-0.1873f);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">green_coef2_bt709</a> = (float8)(-0.4681f);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    float8 <a class="code" href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">blue_coef_bt709</a>   = (float8)(1.8556f);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    float8 lumav             = convert_float8(luma);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    float8 f_r = red_coef_bt709 * convert_float8(cr);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    float8 f_b = blue_coef_bt709 * convert_float8(cb);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    f_r += lumav;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    f_g += lumav;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    f_b += lumav;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    uchar16 rgba_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                               r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    uchar16 rgba_1 = (uchar16)(r_0.s4, g_0.s4, b_0.s4, 255, r_0.s5, g_0.s5, b_0.s5, 255,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                               r_0.s6, g_0.s6, b_0.s6, 255, r_0.s7, g_0.s7, b_0.s7, 255);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    vstore16(rgba_0, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    vstore16(rgba_1, 0, out.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 16);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ab7d52900468f442e85c01d73722d181c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ab7d52900468f442e85c01d73722d181c">arm_compute::test::colorconvert_helper::detail::blue_coef_bt709</a></div><div class="ttdeci">constexpr float blue_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00040">ColorConvertHelper.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a5e59bd8be31e871da2db7572e8b788ce"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a5e59bd8be31e871da2db7572e8b788ce">arm_compute::test::colorconvert_helper::detail::green_coef_bt709</a></div><div class="ttdeci">constexpr float green_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00038">ColorConvertHelper.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_a27e073d020236f5a325762985b10f8d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#a27e073d020236f5a325762985b10f8d0">arm_compute::test::colorconvert_helper::detail::green_coef2_bt709</a></div><div class="ttdeci">constexpr float green_coef2_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00039">ColorConvertHelper.h:39</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00112">helpers.h:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail_xhtml_ac3138daaa2a074986406b22ec6f3d909"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1colorconvert__helper_1_1detail.xhtml#ac3138daaa2a074986406b22ec6f3d909">arm_compute::test::colorconvert_helper::detail::red_coef_bt709</a></div><div class="ttdeci">constexpr float red_coef_bt709</div><div class="ttdef"><b>Definition:</b> <a href="_color_convert_helper_8h_source.xhtml#l00037">ColorConvertHelper.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00150">helpers.h:150</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00152">helpers.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="color__convert_8cl.xhtml">color_convert.cl</a></li>
    <li class="footer">Generated on Wed Aug 29 2018 15:31:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
