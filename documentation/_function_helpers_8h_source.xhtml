<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/backends/FunctionHelpers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_function_helpers_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FunctionHelpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_function_helpers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_FUNCTION_HELPERS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_FUNCTION_HELPERS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_logger_8h.xhtml">arm_compute/graph/Logger.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_tensor_8h.xhtml">arm_compute/graph/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_type_printer_8h.xhtml">arm_compute/graph/TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2backends_2_utils_8h.xhtml">arm_compute/graph/backends/Utils.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_nodes_8h.xhtml">arm_compute/graph/nodes/Nodes.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_info_8h.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">arm_compute/core/utils/misc/Cast.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>backends</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">   56</a></span>&#160;<span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">get_backing_tensor</a>(<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *tensor)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *backing_tensor = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#ace1b6c0005a4c373e54bcfdc6d5b7d68">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">target</a> != TargetInfo::TargetType);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// Get backing tensor handle</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml">ITensorHandle</a> *tensor_handle = tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a1a4fd35b8e2e8a2c7ea38b6d37508673">handle</a>();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Get backing tensor</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        backing_tensor = (tensor_handle != <span class="keyword">nullptr</span>) ? arm_compute::utils::cast::polymorphic_cast&lt;typename TargetInfo::TensorType *&gt;(&amp;tensor_handle-&gt;tensor()) : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> backing_tensor;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">   72</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">validate_node</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node, <span class="keywordtype">size_t</span> num_expected_inputs, <span class="keywordtype">size_t</span> num_expected_outputs)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>()</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; Target : &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2073f3ae2a49f98a91315ed035f8669">id</a>()</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                  &lt;&lt; <span class="stringliteral">&quot; Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a>()</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                  &lt;&lt; std::endl);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(TargetInfo::TargetType != node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a72123a16315dde55dade52690642f56c">assigned_target</a>());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7db9a1c221b414ff11bd4a5b7b97ec8d">num_inputs</a>() != num_expected_inputs);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a20ee33c4a581d8d3507dbb898d47d733">num_outputs</a>() != num_expected_outputs);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ActivationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">   95</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">create_activation_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a> &amp;node)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input    = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output   = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>        act_info = node.activation_info();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// Create function</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ActivationLayerFunction&gt;();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    func-&gt;configure(input, output, act_info);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Activation function: &quot;</span> &lt;&lt; act_info.activation()</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; a: &quot;</span> &lt;&lt; act_info.a()</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; b: &quot;</span> &lt;&lt; act_info.b()</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; InPlace : &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">is_in_place_operation</a>(input, output)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> BatchNormalizationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">  131</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">create_batch_normalization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">BatchNormalizationLayerNode</a> &amp;node)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 5 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *mean      = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *var       = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a>      = get_backing_tensor&lt;TargetInfo&gt;(node.input(3));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *gamma     = get_backing_tensor&lt;TargetInfo&gt;(node.input(4));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                      epsilon   = node.epsilon();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>        fused_act = node.fused_activation();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;BatchNormalizationLayerFunction&gt;();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    func-&gt;configure(input, output, mean, var, beta, gamma, epsilon, fused_act);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Epsilon: &quot;</span> &lt;&lt; epsilon &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                               &lt;&lt; (fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a1d79980f25d38aba3d6777d0afe544f3">enabled</a>() ? <a class="code" href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">to_string</a>(fused_act.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a63e05ce4946dd9807c005c1619fa337a">activation</a>()) : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; InPlace : &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">is_in_place_operation</a>(input, output)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ChannelShuffleLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">  172</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">create_channel_shuffle_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a> &amp;node)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input      = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output     = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               num_groups = node.num_groups();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Create function</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ChannelShuffleLayerFunction&gt;();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    func-&gt;configure(input, output, num_groups);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num groups: &quot;</span> &lt;&lt; num_groups</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConcatenateLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">  205</a></span>&#160;std::unique_ptr&lt;arm_compute::IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">create_concatenate_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">ConcatenateLayerNode</a> &amp;node)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Creating Concatenate node with ID : &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2073f3ae2a49f98a91315ed035f8669">id</a>() &lt;&lt; <span class="stringliteral">&quot; and Name: &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a>() &lt;&lt; std::endl);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a20ee33c4a581d8d3507dbb898d47d733">num_outputs</a>() != 1);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Return nullptr if depth concatenate is switched off</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">if</span>(!node.<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a37c261b90ba4503127a918cec483d859">is_enabled</a>())</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::vector&lt;typename TargetInfo::TensorType *&gt; inputs;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7db9a1c221b414ff11bd4a5b7b97ec8d">num_inputs</a>(); ++i)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        inputs.push_back(get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac6dfcf4c1c7d4cb129fda6393e8c0b21">input</a>(i)));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output      = get_backing_tensor&lt;TargetInfo&gt;(node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a427ac30d0f5274436afbf5c78bc4f644">output</a>(0));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>        concat_axis = node.<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#ac3ff7bc54b572572d6cbc4141b9f5db6">concatenation_axis</a>();</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ConcatenateLayerFunction&gt;();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    func-&gt;configure(inputs, output, concat_axis);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.<a class="code" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">type</a>()</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; output-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Num Inputs: &quot;</span> &lt;&lt; inputs.size()</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Axis: &quot;</span> &lt;&lt; concat_axis</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConvolutionLayerFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">  252</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">create_convolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *weights = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input-&gt;info()-&gt;data_type()))</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        biases-&gt;info()-&gt;set_data_type(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>      = node.convolution_info();</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      num_groups     = node.num_groups();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> conv_algorithm = node.convolution_method();</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>              fast_math      = node.fast_math_hint() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">FastMathHint::Enabled</a>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    std::string                     func_name;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">if</span>(conv_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">ConvolutionMethod::Winograd</a>)</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_groups != 1, <span class="stringliteral">&quot;WinogradConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::WinogradConvolutionLayer&gt;(</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                        std::string(<span class="stringliteral">&quot;WinogradConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                        input, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), fast_math);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">ConvolutionMethod::Direct</a>)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_groups != 1, <span class="stringliteral">&quot;DirectConvolutionLayer does not support grouping!&quot;</span>);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename ConvolutionLayerFunctions::DirectConvolutionLayer&gt;(</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                        std::string(<span class="stringliteral">&quot;DirectConvolutionLayer&quot;</span>),</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                        input, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(conv_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">ConvolutionMethod::GEMM</a>)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GEMMConvolutionLayer&gt;(</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                        std::string(<span class="stringliteral">&quot;GEMMConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                        input, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                        <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), num_groups);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        std::tie(func, func_name) = create_named_memory_managed_function&lt;typename ConvolutionLayerFunctions::GenericConvolutionLayer&gt;(</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                        std::string(<span class="stringliteral">&quot;GenericConvolutionLayer&quot;</span>), mm,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                        input, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                        <a class="code" href="classarm__compute_1_1_weights_info.xhtml">WeightsInfo</a>(), <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>(), fast_math, num_groups);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Groups: &quot;</span> &lt;&lt; num_groups</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; input-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DeconvolutionLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">  331</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">create_deconvolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">DeconvolutionLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *weights = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> deconv_info  = node.deconvolution_info();</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        inner_border = node.inner_border();</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    std::shared_ptr&lt;IMemoryManager&gt; mm = <a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    std::unique_ptr&lt;IFunction&gt;      func;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    std::tie(func, std::ignore) = create_named_memory_managed_function&lt;DeconvolutionLayerFunction&gt;(</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                      std::string(), mm,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                      input, weights, biases, output, deconv_info, inner_border.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aa19402aa7cd5346df67c0142c75d36c0">x</a>(), inner_border.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#afe5ea0266a8c16e45fe5f5d42235f3f5">y</a>());</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DepthwiseConvolutionLayerFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">  373</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">create_depthwise_convolution_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a> &amp;node)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;{</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *weights = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input-&gt;info()-&gt;data_type()))</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        biases-&gt;info()-&gt;set_data_type(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>     = node.convolution_info();</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> dwc_algorithm = node.depthwise_convolution_method();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Create and configure function (we assume that functions have been validated before creation)</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    std::unique_ptr&lt;IFunction&gt; func;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">if</span>(dwc_algorithm == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">DepthwiseConvolutionMethod::Optimized3x3</a>)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename DepthwiseConvolutionLayerFunctions::DepthwiseConvolutionLayer3x3&gt;(</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                        std::string(<span class="stringliteral">&quot;DepthwiseConvolutionLayer3x3&quot;</span>),</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                        input, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename DepthwiseConvolutionLayerFunctions::GenericDepthwiseConvolutionLayer&gt;(</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                        std::string(<span class="stringliteral">&quot;DepthwiseConvolutionLayer&quot;</span>),</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                        input, weights, biases, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">conv_info</a>);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; input-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EltwiseFunctions, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">  430</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">create_eltwise_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a> &amp;node)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 2 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input1         = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input2         = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output         = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>           eltwise_op     = node.eltwise_operation();</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a> = node.convert_policy();</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input1 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    std::unique_ptr&lt;IFunction&gt; func = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    std::string                func_name;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">EltwiseOperation::Add</a>)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Addition&gt;(</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticAddition&quot;</span>),</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">EltwiseOperation::Sub</a>)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    {</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Subtraction&gt;(</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                        std::string(<span class="stringliteral">&quot;ArithmeticSubtraction&quot;</span>),</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                        input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    }</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(eltwise_op == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">EltwiseOperation::Mul</a>)</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        std::tie(func, func_name) = create_named_function&lt;typename EltwiseFunctions::Multiplication&gt;(</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                        std::string(<span class="stringliteral">&quot;PixelWiseMultiplication&quot;</span>),</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                        input1, input2, output, 1.f, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">convert_policy</a>, node.rounding_policy());</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported element-wise operation!&quot;</span>);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Operation &quot;</span> &lt;&lt; func_name</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input1-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Shape : &quot;</span> &lt;&lt; input1-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">return</span> func;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FlattenLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">  490</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">create_flatten_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">FlattenLayerNode</a> &amp;node)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;FlattenLayerFunction&gt;();</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    func-&gt;configure(input, output);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FullyConnectedLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00527"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">  527</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">create_fully_connected_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">FullyConnectedLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;{</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 3 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input   = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *weights = get_backing_tensor&lt;TargetInfo&gt;(node.input(1));</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *biases  = get_backing_tensor&lt;TargetInfo&gt;(node.input(2));</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output  = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>    fc_info = node.info();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;FullyConnectedLayerFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    func-&gt;configure(input, weights, biases, output, fc_info);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input QuantInfo: &quot;</span> &lt;&lt; input-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights QuantInfo: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;quantization_info()</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Weights shape: &quot;</span> &lt;&lt; weights-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> NormalizationLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">  571</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">create_normalization_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;{</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ctx);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>     norm_info = node.normalization_info();</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;NormalizationLayerFunction&gt;();</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    func-&gt;configure(input, output, norm_info);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Normalization info: &quot;</span> &lt;&lt; norm_info.type()</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PermuteLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00610"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">  610</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">create_permute_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a> &amp;node)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;{</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>         &amp;perm   = node.permutation_vector();</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PermuteLayerFunction&gt;();</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    func-&gt;configure(input, output, perm);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Permutation vector: &quot;</span> &lt;&lt; perm</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> PoolingLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00647"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">  647</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">create_pooling_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">PoolingLayerNode</a> &amp;node)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;{</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input     = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output    = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>           pool_info = node.pooling_info();</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;PoolingLayerFunction&gt;();</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    func-&gt;configure(input, output, pool_info);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Pooling info: &quot;</span> &lt;&lt; pool_info.pool_type()</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;}</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReshapeLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00684"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">  684</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">create_reshape_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a> &amp;node)</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ReshapeLayerFunction&gt;();</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    func-&gt;configure(input, output);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;}</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ResizeLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00719"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">  719</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">create_resize_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">ResizeLayerNode</a> &amp;node)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;{</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy = node.policy();</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;ResizeLayerFunction&gt;();</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    func-&gt;configure(input, output, policy, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Interpolation: &quot;</span> &lt;&lt; policy</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;}</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SoftmaxLayerFunction, <span class="keyword">typename</span> TargetInfo&gt;</div><div class="line"><a name="l00757"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">  757</a></span>&#160;std::unique_ptr&lt;IFunction&gt; <a class="code" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">create_softmax_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">SoftmaxLayerNode</a> &amp;node, <a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;{</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    validate_node&lt;TargetInfo&gt;(node, 1 <span class="comment">/* expected inputs */</span>, 1 <span class="comment">/* expected outputs */</span>);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="comment">// Extract IO and info</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *input  = get_backing_tensor&lt;TargetInfo&gt;(node.input(0));</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keyword">typename</span> TargetInfo::TensorType *output = get_backing_tensor&lt;TargetInfo&gt;(node.output(0));</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a>   = node.beta();</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <span class="keyword">auto</span> func = support::cpp14::make_unique&lt;SoftmaxLayerFunction&gt;(<a class="code" href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">get_memory_manager</a>(ctx, TargetInfo::TargetType));</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    func-&gt;configure(input, output, beta);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="comment">// Log info</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a>(<span class="stringliteral">&quot;Instantiated &quot;</span> &lt;&lt; node.type()</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Target &quot;</span> &lt;&lt; TargetInfo::TargetType</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Data Type: &quot;</span> &lt;&lt; input-&gt;info()-&gt;data_type()</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Input shape: &quot;</span> &lt;&lt; input-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot; Output shape: &quot;</span> &lt;&lt; output-&gt;info()-&gt;tensor_shape()</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                               &lt;&lt; std::endl);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keywordflow">return</span> std::move(func);</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;}</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;} <span class="comment">// namespace backends</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_FUNCTION_HELPERS_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a2dfc97df083b68f8409ba21d8a0110d8"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">arm_compute::graph::backends::detail::create_normalization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_normalization_layer(NormalizationLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend normalization layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00571">FunctionHelpers.h:571</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00261">Error.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab75d8ff29ba9b398d5740b3efd156e71"><div class="ttname"><a href="namespacearm__compute.xhtml#ab75d8ff29ba9b398d5740b3efd156e71">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const arm_compute::GradientDimension &amp;type)</div><div class="ttdoc">Formatted output of the GradientDimension type. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_type_printer_8h_source.xhtml#l00064">TypePrinter.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml_a37c261b90ba4503127a918cec483d859"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a37c261b90ba4503127a918cec483d859">arm_compute::graph::ConcatenateLayerNode::is_enabled</a></div><div class="ttdeci">bool is_enabled() const </div><div class="ttdoc">Enabled parameter accessor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_eltwise_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">arm_compute::graph::EltwiseLayerNode</a></div><div class="ttdoc">Eltwise Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_eltwise_layer_node_8h_source.xhtml#l00034">EltwiseLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab146b9cbab6e73e7588b240dc709fe01"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">arm_compute::test::validation::beta</a></div><div class="ttdeci">beta</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00087">GEMM.cpp:87</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00097">Types.h:97</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">arm_compute::graph::ConvolutionMethod::Direct</a></div><div class="ttdoc">Deep direct convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_batch_normalization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">arm_compute::graph::BatchNormalizationLayerNode</a></div><div class="ttdoc">Batch Normalization Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_node_8h_source.xhtml#l00034">BatchNormalizationLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_normalization_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">arm_compute::graph::NormalizationLayerNode</a></div><div class="ttdoc">Normalization Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_normalization_layer_node_8h_source.xhtml#l00034">NormalizationLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aa37faf92f78c0f5cefe2d43c8bf07f18"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">arm_compute::graph::backends::detail::create_eltwise_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_eltwise_layer(EltwiseLayerNode &amp;node)</div><div class="ttdoc">Create a backend element-wise operation layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00430">FunctionHelpers.h:430</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5d1a73ab4a0b267033a569c46813b9d5"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">arm_compute::graph::backends::detail::create_batch_normalization_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_batch_normalization_layer(BatchNormalizationLayerNode &amp;node)</div><div class="ttdoc">Create a backend batch normalization layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00131">FunctionHelpers.h:131</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">Supported tensor data layout dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00115">Types.h:115</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ab8ff2a40f95b76ec10ac2a98d1a8d594"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">arm_compute::graph::backends::detail::create_depthwise_convolution_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &amp;node)</div><div class="ttdoc">Create a backend layer depth-wise convolution function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00373">FunctionHelpers.h:373</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_adb3a9be16de941b0f601e16c8ac76533"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">arm_compute::graph::backends::detail::create_resize_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_resize_layer(ResizeLayerNode &amp;node)</div><div class="ttdoc">Create a backend resize layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00719">FunctionHelpers.h:719</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00899">Types.h:899</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_flatten_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">arm_compute::graph::FlattenLayerNode</a></div><div class="ttdoc">Flatten Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_flatten_layer_node_8h_source.xhtml#l00034">FlattenLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aa65a1becdfa5fc3533d79bba0cd4095c"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">arm_compute::graph::backends::detail::create_permute_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_permute_layer(PermuteLayerNode &amp;node)</div><div class="ttdoc">Create a backend permute layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00610">FunctionHelpers.h:610</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a63e05ce4946dd9807c005c1619fa337a"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a63e05ce4946dd9807c005c1619fa337a">arm_compute::ActivationLayerInfo::activation</a></div><div class="ttdeci">ActivationFunction activation() const </div><div class="ttdoc">Get the type of activation function. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00871">Types.h:871</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5d58c32bff63e4c34b3234f884a4da58"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5d58c32bff63e4c34b3234f884a4da58">arm_compute::test::validation::convert_policy</a></div><div class="ttdeci">convert_policy</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_pixel_wise_multiplication_8cpp_source.xhtml#l00168">PixelWiseMultiplication.cpp:168</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="structarm__compute_1_1_fully_connected_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_fully_connected_layer_info.xhtml">arm_compute::FullyConnectedLayerInfo</a></div><div class="ttdoc">Fully connected layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00686">Types.h:686</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::FastMathHint::Enabled</a></div><div class="ttdoc">Fast math enabled for Convolution layer. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a7880c3b249a6dad40da0ebcf6600b0e1"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">arm_compute::graph::backends::detail::create_flatten_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_flatten_layer(FlattenLayerNode &amp;node)</div><div class="ttdoc">Create a backend flatten layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00490">FunctionHelpers.h:490</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml">arm_compute::graph::GraphContext</a></div><div class="ttdoc">Graph context. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00048">GraphContext.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00839">Types.h:839</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_permute_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">arm_compute::graph::PermuteLayerNode</a></div><div class="ttdoc">Permute Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_permute_layer_node_8h_source.xhtml#l00034">PermuteLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_pooling_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">arm_compute::graph::PoolingLayerNode</a></div><div class="ttdoc">Pooling Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_pooling_layer_node_8h_source.xhtml#l00034">PoolingLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a7db9a1c221b414ff11bd4a5b7b97ec8d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7db9a1c221b414ff11bd4a5b7b97ec8d">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const </div><div class="ttdoc">Returns number of inputs of the node. </div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_ab2d8baa35618bdad1d2814942355311e"><div class="ttname"><a href="graph_2_logger_8h.xhtml#ab2d8baa35618bdad1d2814942355311e">ARM_COMPUTE_LOG_GRAPH_INFO</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_INFO(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_afe5ea0266a8c16e45fe5f5d42235f3f5"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#afe5ea0266a8c16e45fe5f5d42235f3f5">arm_compute::Size2D::y</a></div><div class="ttdeci">size_t y() const </div><div class="ttdoc">Semantic accessor for height as y. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00086">Size2D.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">arm_compute::graph::EltwiseOperation::Sub</a></div><div class="ttdoc">Arithmetic subtraction. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a1a4fd35b8e2e8a2c7ea38b6d37508673"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a1a4fd35b8e2e8a2c7ea38b6d37508673">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor. </div></div>
<div class="ttc" id="_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_weights_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_weights_info.xhtml">arm_compute::WeightsInfo</a></div><div class="ttdoc">Convolution Layer Weights Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00974">Types.h:974</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a5271c97b6bef5972c5e259307d52a4da"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">arm_compute::graph::backends::detail::create_softmax_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_softmax_layer(SoftmaxLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend softmax layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00757">FunctionHelpers.h:757</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">arm_compute::graph::ConvolutionLayerNode</a></div><div class="ttdoc">Convolution Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_node_8h_source.xhtml#l00034">ConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">arm_compute::graph::ConvolutionMethod::GEMM</a></div><div class="ttdoc">GEMM based convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00044">INode.h:44</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">arm_compute::graph::backends::detail::create_convolution_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_convolution_layer(ConvolutionLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend convolution layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00252">FunctionHelpers.h:252</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a72123a16315dde55dade52690642f56c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a72123a16315dde55dade52690642f56c">arm_compute::graph::INode::assigned_target</a></div><div class="ttdeci">Target assigned_target() const </div><div class="ttdoc">Returns assigned target for this node. </div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a37627d5d5bba7f4a8690c71c2ab3cb07"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const </div><div class="ttdoc">Returns node&amp;#39;s name. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">arm_compute::graph::DepthwiseConvolutionMethod</a></div><div class="ttdeci">DepthwiseConvolutionMethod</div><div class="ttdoc">Supported Depthwise Convolution layer methods. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00114">Types.h:114</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a1d79980f25d38aba3d6777d0afe544f3"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a1d79980f25d38aba3d6777d0afe544f3">arm_compute::ActivationLayerInfo::enabled</a></div><div class="ttdeci">bool enabled() const </div><div class="ttdoc">Check if initialised. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00886">Types.h:886</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_aa6fabefcb8c4bd308219565ddcf00928"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">arm_compute::graph::backends::detail::validate_node</a></div><div class="ttdeci">void validate_node(const INode &amp;node, size_t num_expected_inputs, size_t num_expected_outputs)</div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00072">FunctionHelpers.h:72</a></div></div>
<div class="ttc" id="graph_2_tensor_8h_xhtml"><div class="ttname"><a href="graph_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="_i_tensor_info_8h_xhtml"><div class="ttname"><a href="_i_tensor_info_8h.xhtml">ITensorInfo.h</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml"><div class="ttname"><a href="graph_2_logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">arm_compute::graph::ChannelShuffleLayerNode</a></div><div class="ttdoc">Channel Shuffle Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_channel_shuffle_layer_node_8h_source.xhtml#l00034">ChannelShuffleLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::EltwiseOperation::Add</a></div><div class="ttdoc">Arithmetic addition. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_reshape_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">arm_compute::graph::ReshapeLayerNode</a></div><div class="ttdoc">Reshape Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_reshape_layer_node_8h_source.xhtml#l00034">ReshapeLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00569">Types.h:569</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">arm_compute::graph::ConcatenateLayerNode</a></div><div class="ttdoc">Concatenation Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_concatenate_layer_node_8h_source.xhtml#l00034">ConcatenateLayerNode.h:34</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_softmax_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">arm_compute::graph::SoftmaxLayerNode</a></div><div class="ttdoc">Softmax Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_softmax_layer_node_8h_source.xhtml#l00034">SoftmaxLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acbf8f8a6dd185de04c1981c57a8963cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acbf8f8a6dd185de04c1981c57a8963cf">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00572">Winograd.cpp:572</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml">arm_compute::graph::ITensorHandle</a></div><div class="ttdoc">Tensor handle interface object. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_handle_8h_source.xhtml#l00038">ITensorHandle.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ac77fa3bf0d7d7c3fde6243192f93f380"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">arm_compute::graph::backends::detail::create_deconvolution_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_deconvolution_layer(DeconvolutionLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend deconvolution layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00331">FunctionHelpers.h:331</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_ace1b6c0005a4c373e54bcfdc6d5b7d68"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#ace1b6c0005a4c373e54bcfdc6d5b7d68">arm_compute::graph::Tensor::desc</a></div><div class="ttdeci">TensorDescriptor &amp; desc()</div><div class="ttdoc">TensorInfo metadata accessor. </div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a2a7ca82c5e74421cb45f17e936abf964"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">arm_compute::graph::TensorDescriptor::target</a></div><div class="ttdeci">Target target</div><div class="ttdoc">Target. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor.h:113</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml_ac3ff7bc54b572572d6cbc4141b9f5db6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#ac3ff7bc54b572572d6cbc4141b9f5db6">arm_compute::graph::ConcatenateLayerNode::concatenation_axis</a></div><div class="ttdeci">DataLayoutDimension concatenation_axis() const </div><div class="ttdoc">Concatenation axis parameter accessor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00992">Utils.h:992</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a4403f766b0d02eb3882a9521d0390986"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a4403f766b0d02eb3882a9521d0390986">arm_compute::graph::backends::is_in_place_operation</a></div><div class="ttdeci">bool is_in_place_operation(void *input, void *output)</div><div class="ttdoc">Checks if an operation is in place. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00076">Utils.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ac2073f3ae2a49f98a91315ed035f8669"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2073f3ae2a49f98a91315ed035f8669">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const </div><div class="ttdoc">Returns node&amp;#39;s ID. </div></div>
<div class="ttc" id="arm__compute_2graph_2_type_printer_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_activation_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">arm_compute::graph::ActivationLayerNode</a></div><div class="ttdoc">Activation Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_node_8h_source.xhtml#l00034">ActivationLayerNode.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ac64bbd0df74207f9ab59953e21311178"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">arm_compute::graph::backends::detail::create_fully_connected_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_fully_connected_layer(FullyConnectedLayerNode &amp;node, GraphContext &amp;ctx)</div><div class="ttdoc">Create a backend fully connected layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00527">FunctionHelpers.h:527</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">arm_compute::graph::backends::detail::create_activation_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_activation_layer(ActivationLayerNode &amp;node)</div><div class="ttdoc">Creates a backend activation layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00095">FunctionHelpers.h:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_xhtml_a8919c520c1cb9086dd1116de509bd481"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends.xhtml#a8919c520c1cb9086dd1116de509bd481">arm_compute::graph::backends::get_memory_manager</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; get_memory_manager(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Returns the memory manager for a given target. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml#l00088">Utils.h:88</a></div></div>
<div class="ttc" id="graph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00046">Logger.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::graph::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Supported Convolution layer methods. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00105">Types.h:105</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::BorderMode::CONSTANT</a></div><div class="ttdoc">Pixels outside the image are assumed to have a constant value. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a427ac30d0f5274436afbf5c78bc4f644"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a427ac30d0f5274436afbf5c78bc4f644">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const </div><div class="ttdoc">Returns the tensor of a given output of the node. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a69dd1fc17c7a15f4125873be182c8c76"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">arm_compute::graph::backends::detail::get_backing_tensor</a></div><div class="ttdeci">TargetInfo::TensorType * get_backing_tensor(arm_compute::graph::Tensor *tensor)</div><div class="ttdoc">Returns backing tensor of a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00056">FunctionHelpers.h:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_deconvolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">arm_compute::graph::DeconvolutionLayerNode</a></div><div class="ttdoc">Deconvolution Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_deconvolution_layer_node_8h_source.xhtml#l00034">DeconvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_fully_connected_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">arm_compute::graph::FullyConnectedLayerNode</a></div><div class="ttdoc">Fully Connected Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_node_8h_source.xhtml#l00034">FullyConnectedLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">arm_compute::graph::DepthwiseConvolutionLayerNode</a></div><div class="ttdoc">Depthwise Convolution Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution_layer_node_8h_source.xhtml#l00034">DepthwiseConvolutionLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ac6dfcf4c1c7d4cb129fda6393e8c0b21"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac6dfcf4c1c7d4cb129fda6393e8c0b21">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const </div><div class="ttdoc">Returns the tensor of a given input of the node. </div></div>
<div class="ttc" id="_nodes_8h_xhtml"><div class="ttname"><a href="_nodes_8h.xhtml">Nodes.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">arm_compute::graph::ConvolutionMethod::Winograd</a></div><div class="ttdoc">Winograd based convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_resize_layer_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">arm_compute::graph::ResizeLayerNode</a></div><div class="ttdoc">Resize Layer node. </div><div class="ttdef"><b>Definition:</b> <a href="_resize_layer_node_8h_source.xhtml#l00034">ResizeLayerNode.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node&amp;#39;s type. </div></div>
<div class="ttc" id="arm__compute_2graph_2backends_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2backends_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::EltwiseOperation::Mul</a></div><div class="ttdoc">Arithmetic multiplication. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">arm_compute::graph::DepthwiseConvolutionMethod::Optimized3x3</a></div><div class="ttdoc">Optimized 3x3 direct depthwise convolution. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_concatenate_layer_node_xhtml_a65d13dc93e2df5e8ab725263cf9f4ac5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#a65d13dc93e2df5e8ab725263cf9f4ac5">arm_compute::graph::ConcatenateLayerNode::type</a></div><div class="ttdeci">NodeType type() const override</div><div class="ttdoc">Returns node&amp;#39;s type. </div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_aa19402aa7cd5346df67c0142c75d36c0"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#aa19402aa7cd5346df67c0142c75d36c0">arm_compute::Size2D::x</a></div><div class="ttdeci">size_t x() const </div><div class="ttdoc">Semantic accessor for width as x. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00077">Size2D.h:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00718">Types.h:718</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a0e51b62035e79b0f12964cae17ce0480"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">arm_compute::graph::backends::detail::create_pooling_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_pooling_layer(PoolingLayerNode &amp;node)</div><div class="ttdoc">Create a backend pooling layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00647">FunctionHelpers.h:647</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">arm_compute::graph::backends::detail::create_concatenate_layer</a></div><div class="ttdeci">std::unique_ptr&lt; arm_compute::IFunction &gt; create_concatenate_layer(ConcatenateLayerNode &amp;node)</div><div class="ttdoc">Create a backend layer concatenate function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00205">FunctionHelpers.h:205</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00379">Types.h:379</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_ad1922deea021647290d0c206723e6c73"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">arm_compute::graph::backends::detail::create_reshape_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_reshape_layer(ReshapeLayerNode &amp;node)</div><div class="ttdoc">Create a backend reshape layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00684">FunctionHelpers.h:684</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a20ee33c4a581d8d3507dbb898d47d733"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a20ee33c4a581d8d3507dbb898d47d733">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const </div><div class="ttdoc">Returns number of outputs of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1backends_1_1detail_xhtml_a3f5c14020836599056281fe52d7e9dd3"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">arm_compute::graph::backends::detail::create_channel_shuffle_layer</a></div><div class="ttdeci">std::unique_ptr&lt; IFunction &gt; create_channel_shuffle_layer(ChannelShuffleLayerNode &amp;node)</div><div class="ttdoc">Create a backend channel shuffle layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_function_helpers_8h_source.xhtml#l00172">FunctionHelpers.h:172</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_59b2231210c554f4cc243709030bf1f8.xhtml">backends</a></li><li class="navelem"><a class="el" href="_function_helpers_8h.xhtml">FunctionHelpers.h</a></li>
    <li class="footer">Generated on Wed Aug 29 2018 15:31:26 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
