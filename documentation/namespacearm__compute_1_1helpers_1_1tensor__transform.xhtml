<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::helpers::tensor_transform Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::helpers::tensor_transform Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:add47293d0be725957b930435482bfd53"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#add47293d0be725957b930435482bfd53">slice_absolute_end_coords</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> ends)</td></tr>
<tr class="memdesc:add47293d0be725957b930435482bfd53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute ends coordinates of slice.  <a href="#add47293d0be725957b930435482bfd53">More...</a><br /></td></tr>
<tr class="separator:add47293d0be725957b930435482bfd53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8102d4bb8d7cb6a4ccf5e5e422b2a751"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a8102d4bb8d7cb6a4ccf5e5e422b2a751">compute_slice_output_shape</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> starts, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> ends_abs)</td></tr>
<tr class="memdesc:a8102d4bb8d7cb6a4ccf5e5e422b2a751"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes output shape of slice.  <a href="#a8102d4bb8d7cb6a4ccf5e5e422b2a751">More...</a><br /></td></tr>
<tr class="separator:a8102d4bb8d7cb6a4ccf5e5e422b2a751"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5cd68178f4a5d7e9f3be67c19178fbe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#aa5cd68178f4a5d7e9f3be67c19178fbe">strided_slice_absolute_start_coords</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> starts, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> strides, int32_t begin_mask=0)</td></tr>
<tr class="memdesc:aa5cd68178f4a5d7e9f3be67c19178fbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute start coordinates of strided slice.  <a href="#aa5cd68178f4a5d7e9f3be67c19178fbe">More...</a><br /></td></tr>
<tr class="separator:aa5cd68178f4a5d7e9f3be67c19178fbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88bcbb798479cb74a34e0c4b1de181c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a88bcbb798479cb74a34e0c4b1de181c8">strided_slice_absolute_end_coords</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> starts_abs, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> ends, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> strides, int32_t end_mask=0, int32_t shrink_axis_mask=0)</td></tr>
<tr class="memdesc:a88bcbb798479cb74a34e0c4b1de181c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute ends coordinates of strided slice.  <a href="#a88bcbb798479cb74a34e0c4b1de181c8">More...</a><br /></td></tr>
<tr class="separator:a88bcbb798479cb74a34e0c4b1de181c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a125684caafdab8cdee40e424166cf61f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a125684caafdab8cdee40e424166cf61f">strided_slice_strides</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> strides)</td></tr>
<tr class="memdesc:a125684caafdab8cdee40e424166cf61f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the final strides of strided slice.  <a href="#a125684caafdab8cdee40e424166cf61f">More...</a><br /></td></tr>
<tr class="separator:a125684caafdab8cdee40e424166cf61f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af13ccc2d4ed13a513cf7d031233cbfdd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#af13ccc2d4ed13a513cf7d031233cbfdd">compute_strided_slice_output_shape</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input_shape, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> starts_abs, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> ends_abs, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> final_strides)</td></tr>
<tr class="memdesc:af13ccc2d4ed13a513cf7d031233cbfdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes output shape of strided slice.  <a href="#af13ccc2d4ed13a513cf7d031233cbfdd">More...</a><br /></td></tr>
<tr class="separator:af13ccc2d4ed13a513cf7d031233cbfdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a8102d4bb8d7cb6a4ccf5e5e422b2a751"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8102d4bb8d7cb6a4ccf5e5e422b2a751">&#9670;&nbsp;</a></span>compute_slice_output_shape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> compute_slice_output_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>starts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>ends_abs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes output shape of slice. </p>
<dl class="section warning"><dt>Warning</dt><dd>Ends must be non-negative</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts</td><td>Start coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends_abs</td><td>Absolute end coordinates</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The output tensor shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="tensor__transform_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="tensor__transform_8cpp_source.xhtml">tensor_transform.cpp</a>.</p>

<p class="reference">References <a class="el" href="tensor__transform_8cpp_source.xhtml#l00142">compute_strided_slice_output_shape()</a>, and <a class="el" href="tensor__transform_8cpp_source.xhtml#l00133">strided_slice_strides()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_slice_operations_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::slice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Get unit strides</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a> unit_strides = <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a125684caafdab8cdee40e424166cf61f">strided_slice_strides</a>(input_shape, <a class="code" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a>());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#af13ccc2d4ed13a513cf7d031233cbfdd">compute_strided_slice_output_shape</a>(input_shape, starts, ends_abs, unit_strides);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a11916d4148a39a67794050373f54825a"><div class="ttname"><a href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">arm_compute::BiStrides</a></div><div class="ttdeci">Coordinates BiStrides</div><div class="ttdoc">Bidirectional strides. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00049">Types.h:49</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_a125684caafdab8cdee40e424166cf61f"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a125684caafdab8cdee40e424166cf61f">arm_compute::helpers::tensor_transform::strided_slice_strides</a></div><div class="ttdeci">Coordinates strided_slice_strides(TensorShape input_shape, Coordinates strides)</div><div class="ttdoc">Returns the final strides of strided slice. </div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00133">tensor_transform.cpp:133</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_af13ccc2d4ed13a513cf7d031233cbfdd"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#af13ccc2d4ed13a513cf7d031233cbfdd">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape</a></div><div class="ttdeci">TensorShape compute_strided_slice_output_shape(TensorShape input_shape, Coordinates starts_abs, Coordinates ends_abs, Coordinates final_strides)</div><div class="ttdoc">Computes output shape of strided slice. </div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00142">tensor_transform.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af13ccc2d4ed13a513cf7d031233cbfdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af13ccc2d4ed13a513cf7d031233cbfdd">&#9670;&nbsp;</a></span>compute_strided_slice_output_shape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> compute_strided_slice_output_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>starts_abs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>ends_abs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>final_strides</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes output shape of strided slice. </p>
<dl class="section warning"><dt>Warning</dt><dd>Starts and ends must be non-negative </dd>
<dd>
Starts, ends and final strides should have the same dimensions as the input shape</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts_abs</td><td>Absolute start coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends_abs</td><td>Absolute end coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">final_strides</td><td>Slice strides</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The output tensor shape </dd></dl>

<p class="definition">Definition at line <a class="el" href="tensor__transform_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="tensor__transform_8cpp_source.xhtml">tensor_transform.cpp</a>.</p>

<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00087">arm_compute::test::validation::output_shape</a>, and <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tensor__transform_8cpp_source.xhtml#l00049">compute_slice_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00576">arm_compute::misc::shape_calculator::compute_strided_slice_shape()</a>, and <a class="el" href="_slice_operations_8cpp_source.xhtml#l00082">arm_compute::test::validation::reference::strided_slice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a> = input_shape;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; input_shape.num_dimensions(); ++i)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> stride_i = final_strides[i];</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> range    = ends_abs[i] - starts_abs[i];</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span>((range == 0) ||                 <span class="comment">// Zero range</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;           (range &lt; 0 &amp;&amp; stride_i &gt;= 0) || <span class="comment">// Negative range with positive stride</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;           (range &gt; 0 &amp;&amp; stride_i &lt;= 0))   <span class="comment">// Positive range with negative stride</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            output_shape.set(i, 0);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordtype">int</span> dim = range / stride_i + (range % stride_i != 0 ? 1 : 0);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            output_shape.set(i, dim);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">output_shape</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7fc93f37dac131a1a40b7921f9df3a9a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7fc93f37dac131a1a40b7921f9df3a9a">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">output_shape</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00087">GEMM.cpp:87</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="add47293d0be725957b930435482bfd53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add47293d0be725957b930435482bfd53">&#9670;&nbsp;</a></span>slice_absolute_end_coords()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> slice_absolute_end_coords </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>ends</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the absolute ends coordinates of slice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends</td><td>End coordinates</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Absolute end coordinate </dd></dl>

<p class="definition">Definition at line <a class="el" href="tensor__transform_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="tensor__transform_8cpp_source.xhtml">tensor_transform.cpp</a>.</p>

<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00091">strided_slice_absolute_end_coords()</a>, and <a class="el" href="tensor__transform_8cpp_source.xhtml#l00133">strided_slice_strides()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00052">SliceLayerNode::compute_output_descriptor()</a>, <a class="el" href="_c_l_slice_8cpp_source.xhtml#l00034">CLSlice::configure()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::slice()</a>, and <a class="el" href="_c_l_slice_8cpp_source.xhtml#l00046">CLSlice::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// Create end mask</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    int32_t end_mask = 0;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; ends.num_dimensions(); ++i)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">if</span>(ends[i] &lt; 0)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            end_mask |= 1 &lt;&lt; i;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Get unit strides</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a> unit_strides = <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a125684caafdab8cdee40e424166cf61f">strided_slice_strides</a>(input_shape, <a class="code" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a>());</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a88bcbb798479cb74a34e0c4b1de181c8">strided_slice_absolute_end_coords</a>(input_shape, Coordinates(), ends, unit_strides, end_mask);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a11916d4148a39a67794050373f54825a"><div class="ttname"><a href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">arm_compute::BiStrides</a></div><div class="ttdeci">Coordinates BiStrides</div><div class="ttdoc">Bidirectional strides. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00049">Types.h:49</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_a88bcbb798479cb74a34e0c4b1de181c8"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a88bcbb798479cb74a34e0c4b1de181c8">arm_compute::helpers::tensor_transform::strided_slice_absolute_end_coords</a></div><div class="ttdeci">Coordinates strided_slice_absolute_end_coords(TensorShape input_shape, Coordinates starts_abs, Coordinates ends, Coordinates strides, int32_t end_mask=0, int32_t shrink_axis_mask=0)</div><div class="ttdoc">Returns the absolute ends coordinates of strided slice. </div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00091">tensor_transform.cpp:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1tensor__transform_xhtml_a125684caafdab8cdee40e424166cf61f"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml#a125684caafdab8cdee40e424166cf61f">arm_compute::helpers::tensor_transform::strided_slice_strides</a></div><div class="ttdeci">Coordinates strided_slice_strides(TensorShape input_shape, Coordinates strides)</div><div class="ttdoc">Returns the final strides of strided slice. </div><div class="ttdef"><b>Definition:</b> <a href="tensor__transform_8cpp_source.xhtml#l00133">tensor_transform.cpp:133</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a88bcbb798479cb74a34e0c4b1de181c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88bcbb798479cb74a34e0c4b1de181c8">&#9670;&nbsp;</a></span>strided_slice_absolute_end_coords()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> strided_slice_absolute_end_coords </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>starts_abs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>ends</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>end_mask</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>shrink_axis_mask</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the absolute ends coordinates of strided slice. </p>
<dl class="section warning"><dt>Warning</dt><dd>Starts must be non-negative</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts_abs</td><td>Absolute start coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends</td><td>End coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td>Slice strides </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end_mask</td><td>(Optional) If the ith bit of end_mask is set, end[i] is ignored and the fullest possible range in that dimension is used instead. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shrink_axis_mask</td><td>(Optional) If the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1. A slice of size 1 starting from starts[i] in the dimension must be preserved.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Absolute end coordinates </dd></dl>

<p class="definition">Definition at line <a class="el" href="tensor__transform_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="tensor__transform_8cpp_source.xhtml">tensor_transform.cpp</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00084">arm_compute::utility::clamp()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00320">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00576">arm_compute::misc::shape_calculator::compute_strided_slice_shape()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00104">CLStridedSliceKernel::configure()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00032">slice_absolute_end_coords()</a>, and <a class="el" href="_slice_operations_8cpp_source.xhtml#l00082">arm_compute::test::validation::reference::strided_slice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    Coordinates ends_abs;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; ends.num_dimensions(); ++i)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Get end index</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordtype">int</span> stop_i = ends[i];</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">// Shrink dimension</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">if</span>((shrink_axis_mask &amp; (1 &lt;&lt; i)) != 0)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            stop_i = starts_abs[i] + 1;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">// Reset in case of begin mask present</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span>((end_mask &amp; 1 &lt;&lt; i) != 0)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            stop_i = (strides[i] &gt; 0) ? std::numeric_limits&lt;int&gt;::max() : <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int&gt;::lowest</a>();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment">// Account negative end points</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> dim_size = input_shape[i];</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">if</span>(stop_i &lt; 0)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            stop_i += dim_size;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Final clamp</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        stop_i = (strides[i] &gt; 0) ? <a class="code" href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">utility::clamp</a>(stop_i, 0, dim_size) : <a class="code" href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">utility::clamp</a>(stop_i, -1, dim_size - 1);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        ends_abs.set(i, stop_i);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// Fill remaining ends</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = ends_abs.num_dimensions(); i &lt; input_shape.num_dimensions(); ++i)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        ends_abs.set(i, input_shape[i]);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> ends_abs;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a12c3c62f510452805c289e180ec78bb7"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">arm_compute::utility::clamp</a></div><div class="ttdeci">T clamp(const T &amp;n, const T &amp;lower, const T &amp;upper)</div><div class="ttdoc">Performs clamping among a lower and upper value. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00084">Utility.h:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00320">ToolchainSupport.h:320</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa5cd68178f4a5d7e9f3be67c19178fbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5cd68178f4a5d7e9f3be67c19178fbe">&#9670;&nbsp;</a></span>strided_slice_absolute_start_coords()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> strided_slice_absolute_start_coords </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>starts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>begin_mask</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the absolute start coordinates of strided slice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts</td><td>Start coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td>Slice strides </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">begin_mask</td><td>(Optional) If the ith bit of begin_mask is set, starts[i] is ignored and the fullest possible range in that dimension is used instead.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Absolute start coordinates </dd></dl>

<p class="definition">Definition at line <a class="el" href="tensor__transform_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="tensor__transform_8cpp_source.xhtml">tensor_transform.cpp</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00084">arm_compute::utility::clamp()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00320">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00576">arm_compute::misc::shape_calculator::compute_strided_slice_shape()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00104">CLStridedSliceKernel::configure()</a>, and <a class="el" href="_slice_operations_8cpp_source.xhtml#l00082">arm_compute::test::validation::reference::strided_slice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    Coordinates starts_abs;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; starts.num_dimensions(); ++i)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Get start index</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordtype">int</span> start_i = starts[i];</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Reset in case of begin mask present</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">if</span>((begin_mask &amp; 1 &lt;&lt; i) != 0)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            start_i = strides[i] &gt; 0 ? <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int&gt;::lowest</a>() : <a class="code" href="namespacestd.xhtml">std</a>::numeric_limits&lt;int&gt;::max();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Account negative start points</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> dim_size = input_shape[i];</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">if</span>(start_i &lt; 0)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            start_i += dim_size;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment">// Final clamp</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        start_i = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">utility::clamp</a>(start_i, 0, dim_size - 1);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        starts_abs.set(i, start_i);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Fill remaining</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = starts_abs.num_dimensions(); i &lt; input_shape.num_dimensions(); ++i)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        starts_abs.set(i, 0);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> starts_abs;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a12c3c62f510452805c289e180ec78bb7"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">arm_compute::utility::clamp</a></div><div class="ttdeci">T clamp(const T &amp;n, const T &amp;lower, const T &amp;upper)</div><div class="ttdoc">Performs clamping among a lower and upper value. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00084">Utility.h:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00320">ToolchainSupport.h:320</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a125684caafdab8cdee40e424166cf61f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a125684caafdab8cdee40e424166cf61f">&#9670;&nbsp;</a></span>strided_slice_strides()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> strided_slice_strides </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>input_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>strides</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the final strides of strided slice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_shape</td><td>Input tensor shape </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td>Slice strides</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The final strides need by strided slice </dd></dl>

<p class="definition">Definition at line <a class="el" href="tensor__transform_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="tensor__transform_8cpp_source.xhtml">tensor_transform.cpp</a>.</p>

<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tensor__transform_8cpp_source.xhtml#l00049">compute_slice_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00576">arm_compute::misc::shape_calculator::compute_strided_slice_shape()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00104">CLStridedSliceKernel::configure()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00032">slice_absolute_end_coords()</a>, and <a class="el" href="_slice_operations_8cpp_source.xhtml#l00082">arm_compute::test::validation::reference::strided_slice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = strides.num_dimensions(); i &lt; input_shape.num_dimensions(); ++i)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        strides.set(i, 1);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> strides;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1helpers.xhtml">helpers</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1helpers_1_1tensor__transform.xhtml">tensor_transform</a></li>
    <li class="footer">Generated on Thu Nov 22 2018 11:57:50 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
