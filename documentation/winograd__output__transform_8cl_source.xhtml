<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/winograd_output_transform.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('winograd__output__transform_8cl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">winograd_output_transform.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="winograd__output__transform_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if defined(NUM_TILES_X) &amp;&amp; defined(OUTPUT_TILE_W) &amp;&amp; defined(OUTPUT_TILE_H)</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_2x2_3x3_nchw(</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>),</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    ,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Each thread stores a 2x2/2x1 or 1x2 tile accordingly with the filter size</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a> = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> __global uchar *src_addr = <a class="code" href="helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a>(&amp;src, 0, 0, 0);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Load the values across the 16 or 4 channels to compose the 4x4 or 4x1 tile</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">float</span> d00 = *((__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_z));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">float</span> d01 = *((__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_z));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">float</span> d02 = *((__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_z));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">float</span> d03 = *((__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_z));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Compute the 2x1 or 1x2 output tile</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// out00 = d00 + d01 + d02</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// out01 = d01 - d02 - d03</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">float</span> out00 = d00 + d01 + d02;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">float</span> out01 = d01 - d02 - d03;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">float</span> d10 = *((__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_z));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">float</span> d11 = *((__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_z));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">float</span> d12 = *((__global <span class="keywordtype">float</span> *)(src_addr + 6 * src_stride_z));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">float</span> d13 = *((__global <span class="keywordtype">float</span> *)(src_addr + 7 * src_stride_z));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">float</span> d20 = *((__global <span class="keywordtype">float</span> *)(src_addr + 8 * src_stride_z));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">float</span> d21 = *((__global <span class="keywordtype">float</span> *)(src_addr + 9 * src_stride_z));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">float</span> d22 = *((__global <span class="keywordtype">float</span> *)(src_addr + 10 * src_stride_z));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">float</span> d23 = *((__global <span class="keywordtype">float</span> *)(src_addr + 11 * src_stride_z));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">float</span> d30 = *((__global <span class="keywordtype">float</span> *)(src_addr + 12 * src_stride_z));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">float</span> d31 = *((__global <span class="keywordtype">float</span> *)(src_addr + 13 * src_stride_z));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordtype">float</span> d32 = *((__global <span class="keywordtype">float</span> *)(src_addr + 14 * src_stride_z));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">float</span> d33 = *((__global <span class="keywordtype">float</span> *)(src_addr + 15 * src_stride_z));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Compute the 2x2 output tile</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">float</span> k0 = d01 + d11 + d21;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">float</span> k1 = d02 + d12 + d22;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">float</span> k2 = d11 - d21 - d31;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">float</span> k3 = d12 - d22 - d32;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// out00 = d00 + d10 + d20 + d01 + d11 + d21 + d02 + d12 + d22</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// out01 = d01 + d11 + d21 - (d02 + d12 + d22) - (d03 + d13 + d23)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// out10 = d10 - d20 - d30 + (d11 - d21 - d31) + (d12 - d22 - d32)</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// out11 = d11 - d21 - d31 - (d12 - d22 - d32) - (d13 - d23 - d33)</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">float</span> out00 = d10;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">float</span> out01 = -d13;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">float</span> out10 = d10;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">float</span> out11 = -d13;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    out00 += d00 + d20 + k0 + k1;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    out01 += k0 - k1 - (d03 + d23);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    out10 += -d20 - d30 + k2 + k3;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    out11 += k2 - k3 + d23 + d33;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">int</span> y_in  = get_global_id(1);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordtype">int</span> x_out = (y_in % NUM_TILES_X) * OUTPUT_TILE_W;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">int</span> y_out = (y_in / NUM_TILES_X) * OUTPUT_TILE_H;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">int</span> z_out = get_global_id(0);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a> = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, z_out)));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    out00 += (float)b;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    out01 += (float)b;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Get output address</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(float) + y_out * dst_stride_y + z_out * dst_stride_z;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Store the output tile</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 0 * dst_stride_y)) = out00;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 1 * dst_stride_y)) = out01;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    vstore2((float2)(out00, out01), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 0 * dst_stride_y));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#if !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp;&amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    out10 += (float)b;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    out11 += (float)b;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    vstore2((float2)(out10, out11), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 1 * dst_stride_y));</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">#endif // !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp;&amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x4_3x3_nchw(</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    ,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Each thread stores a 4x4/4x1 or 1x4 tile</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> __global uchar *src_addr = <a class="code" href="helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a>(&amp;src, 0, 0, 0);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// Load the values across the channels to compose the 6x6 or 6x1 tile</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">float</span> d00 = *((__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_z));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">float</span> d01 = *((__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_z));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">float</span> d02 = *((__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_z));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">float</span> d03 = *((__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_z));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">float</span> d04 = *((__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_z));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordtype">float</span> d05 = *((__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_z));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Compute out00, out01, out02 and out03</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">float</span> out00 = d00 + d01 + d02 + d03 + d04;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">float</span> out01 = d01 - d02 + 2.0f * d03 - 2.0f * d04;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">float</span> out02 = d01 + d02 + 4.0f * d03 + 4.0f * d04;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">float</span> out03 = d01 - d02 + 8.0f * d03 - 8.0f * d04 + d05;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">float</span> d10 = *((__global <span class="keywordtype">float</span> *)(src_addr + 6 * src_stride_z));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">float</span> d11 = *((__global <span class="keywordtype">float</span> *)(src_addr + 7 * src_stride_z));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordtype">float</span> d12 = *((__global <span class="keywordtype">float</span> *)(src_addr + 8 * src_stride_z));</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">float</span> d13 = *((__global <span class="keywordtype">float</span> *)(src_addr + 9 * src_stride_z));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">float</span> d14 = *((__global <span class="keywordtype">float</span> *)(src_addr + 10 * src_stride_z));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordtype">float</span> d15 = *((__global <span class="keywordtype">float</span> *)(src_addr + 11 * src_stride_z));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">float</span> d20 = *((__global <span class="keywordtype">float</span> *)(src_addr + 12 * src_stride_z));</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">float</span> d21 = *((__global <span class="keywordtype">float</span> *)(src_addr + 13 * src_stride_z));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordtype">float</span> d22 = *((__global <span class="keywordtype">float</span> *)(src_addr + 14 * src_stride_z));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordtype">float</span> d23 = *((__global <span class="keywordtype">float</span> *)(src_addr + 15 * src_stride_z));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">float</span> d24 = *((__global <span class="keywordtype">float</span> *)(src_addr + 16 * src_stride_z));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">float</span> d25 = *((__global <span class="keywordtype">float</span> *)(src_addr + 17 * src_stride_z));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">float</span> d30 = *((__global <span class="keywordtype">float</span> *)(src_addr + 18 * src_stride_z));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">float</span> d31 = *((__global <span class="keywordtype">float</span> *)(src_addr + 19 * src_stride_z));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">float</span> d32 = *((__global <span class="keywordtype">float</span> *)(src_addr + 20 * src_stride_z));</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">float</span> d33 = *((__global <span class="keywordtype">float</span> *)(src_addr + 21 * src_stride_z));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordtype">float</span> d34 = *((__global <span class="keywordtype">float</span> *)(src_addr + 22 * src_stride_z));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">float</span> d35 = *((__global <span class="keywordtype">float</span> *)(src_addr + 23 * src_stride_z));</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">float</span> d40 = *((__global <span class="keywordtype">float</span> *)(src_addr + 24 * src_stride_z));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">float</span> d41 = *((__global <span class="keywordtype">float</span> *)(src_addr + 25 * src_stride_z));</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">float</span> d42 = *((__global <span class="keywordtype">float</span> *)(src_addr + 26 * src_stride_z));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">float</span> d43 = *((__global <span class="keywordtype">float</span> *)(src_addr + 27 * src_stride_z));</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordtype">float</span> d44 = *((__global <span class="keywordtype">float</span> *)(src_addr + 28 * src_stride_z));</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">float</span> d45 = *((__global <span class="keywordtype">float</span> *)(src_addr + 29 * src_stride_z));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordtype">float</span> d50 = *((__global <span class="keywordtype">float</span> *)(src_addr + 30 * src_stride_z));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordtype">float</span> d51 = *((__global <span class="keywordtype">float</span> *)(src_addr + 31 * src_stride_z));</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">float</span> d52 = *((__global <span class="keywordtype">float</span> *)(src_addr + 32 * src_stride_z));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">float</span> d53 = *((__global <span class="keywordtype">float</span> *)(src_addr + 33 * src_stride_z));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">float</span> d54 = *((__global <span class="keywordtype">float</span> *)(src_addr + 34 * src_stride_z));</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">float</span> d55 = *((__global <span class="keywordtype">float</span> *)(src_addr + 35 * src_stride_z));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Compute out00, out01, out02 and out03</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">float</span> out00 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordtype">float</span> out01 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordtype">float</span> out02 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordtype">float</span> out03 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">float</span> k0 = d03 + d04 + d13 + d14 + d23 + d24 + d33 + d34 + d43 + d44;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">float</span> k1 = 2.0f * d03 - 2.0f * d04 + 2.0f * d13 - 2.0f * d14 + 2.0f * d23 - 2.0f * d24 + 2.0f * d33 - 2.0f * d34 + 2.0f * d43 - 2.0f * d44;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    out00 += k0 + d00 + d02 + d10 + d12 + d20 + d22 + d30 + d32 + d40 + d42;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    out01 += k1 - d02 - d12 - d22 - d32 - d42;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    out02 += 4.0f * k0 + d02 + d12 + d22 + d32 + d42;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    out03 += 4.0f * k1 - d02 - d12 - d22 - d32 - d42 + d05 + d15 + d25 + d35 + d45;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// Compute out10, out11, out12 and out13</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">float</span> out10 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordtype">float</span> out11 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">float</span> out12 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordtype">float</span> out13 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    k0 = d13 + d14 - d23 - d24 + 2.0f * d33 + 2.0f * d34 - 2.0f * d43 - 2.0f * d44;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    k1 = 2.0f * d13 - 2.0f * d14 - 2.0f * d23 + 2.0f * d24 + 4.0f * d33 - 4.0f * d34 - 4.0f * d43 + 4.0f * d44;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    out10 += k0 + d10 + d12 - d20 - d22 + 2.0f * d30 + 2.0f * d32 - 2.0f * d40 - 2.0f * d42;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    out11 += k1 - d12 + d22 - 2.0f * d32 + 2.0f * d42;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    out12 += 4.0f * k0 + d12 - d22 + 2.0f * d32 - 2.0f * d42;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    out13 += 4.0f * k1 - d12 + d15 + d22 - d25 - 2.0f * d32 + 2.0f * d35 + 2.0f * d42 - 2.0f * d45;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Compute out20, out21, out22 and out23</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordtype">float</span> out20 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordtype">float</span> out21 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordtype">float</span> out22 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordtype">float</span> out23 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    k0 = d13 + d14 + d23 + d24 + 4.0f * d33 + 4.0f * d34 + 4.0f * d43 + 4.0f * d44;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    k1 = 2.0f * d13 - 2.0f * d14 + 2.0f * d23 - 2.0f * d24 + 8.0f * d33 - 8.0f * d34 + 8.0f * d43 - 8.0f * d44;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    out20 += k0 + d10 + d12 + d20 + d22 + 4.0f * d30 + 4.0f * d32 + 4.0f * d40 + 4.0f * d42;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    out21 += k1 - d12 - d22 - 4.0f * d32 - 4.0f * d42;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    out22 += 4.0f * k0 + d12 + d22 + 4.0f * d32 + 4.0f * d42;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    out23 += 4.0f * k1 - d12 + d15 - d22 + d25 - 4.0f * d32 + 4.0f * d35 - 4.0f * d42 + 4.0f * d45;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="comment">// Compute out30, out31, out32 and out33</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordtype">float</span> out30 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">float</span> out31 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordtype">float</span> out32 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">float</span> out33 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    k0 = d13 + d14 - d23 - d24 + 8.0f * d33 + 8.0f * d34 - 8.0f * d43 - 8.0f * d44 + d53 + d54;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    k1 = 2.0f * d13 - 2.0f * d14 - 2.0f * d23 + 2.0f * d24 + 16.0f * d33 - 16.0f * d34 - 16.0f * d43 + 16.0f * d44 + 2.0f * d53 - 2.0f * d54;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    out30 += k0 + d10 + d12 - d20 - d22 + 8.0f * d30 + 8.0f * d32 - 8.0f * d40 - 8.0f * d42 + d50 + d52;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    out31 += k1 - d12 + d22 - 8.0f * d32 + 8.0f * d42 - d52;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    out32 += 4.0f * k0 + d12 - d22 + 8.0f * d32 - 8.0f * d42 + d52;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    out33 += 4.0f * k1 - d12 + d15 + d22 - d25 - 8.0f * d32 + 8.0f * d35 + 8.0f * d42 - 8.0f * d45 - d52 + d55;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordtype">int</span> y_in  = get_global_id(1);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordtype">int</span> x_out = (y_in % NUM_TILES_X) * OUTPUT_TILE_W;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordtype">int</span> y_out = (y_in / NUM_TILES_X) * OUTPUT_TILE_H;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">int</span> z_out = get_global_id(0);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordtype">float</span> b = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, z_out)));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    out00 += (float)b;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    out01 += (float)b;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    out02 += (float)b;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    out03 += (float)b;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// Get output address</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(float) + y_out * dst_stride_y + z_out * dst_stride_z;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// Store the output tile</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 0 * dst_stride_y)) = out00;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 1 * dst_stride_y)) = out01;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 2 * dst_stride_y)) = out02;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 3 * dst_stride_y)) = out03;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    vstore4((float4)(out00, out01, out02, out03), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 0 * dst_stride_y));</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#if !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp;&amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    out10 += (float)b;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    out11 += (float)b;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    out12 += (float)b;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    out13 += (float)b;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    out20 += (float)b;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    out21 += (float)b;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    out22 += (float)b;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    out23 += (float)b;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    out30 += (float)b;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    out31 += (float)b;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    out32 += (float)b;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    out33 += (float)b;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    vstore4((float4)(out10, out11, out12, out13), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 1 * dst_stride_y));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    vstore4((float4)(out20, out21, out22, out23), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 2 * dst_stride_y));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    vstore4((float4)(out30, out31, out32, out33), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 3 * dst_stride_y));</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="preprocessor">#endif // !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp;&amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x4_3x3_nhwc(</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias),</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordtype">int</span> dst_size)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// Each thread stores a 4x4/4x1 or 1x4 tile</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> __global uchar *src_addr = <a class="code" href="helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a>(&amp;src, 0, 0, 0);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// Load the values across the 36 channels to compose the 6x6 or 6x1 tile</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordtype">float</span> d00 = *((__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_z));</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordtype">float</span> d01 = *((__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_z));</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordtype">float</span> d02 = *((__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_z));</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordtype">float</span> d03 = *((__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_z));</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordtype">float</span> d04 = *((__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_z));</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordtype">float</span> d05 = *((__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_z));</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">// Compute out00, out01, out02 and out03</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordtype">float</span> out00 = d00 + d01 + d02 + d03 + d04;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordtype">float</span> out01 = d01 - d02 + 2.0f * d03 - 2.0f * d04;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordtype">float</span> out02 = d01 + d02 + 4.0f * d03 + 4.0f * d04;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordtype">float</span> out03 = d01 - d02 + 8.0f * d03 - 8.0f * d04 + d05;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordtype">float</span> d10 = *((__global <span class="keywordtype">float</span> *)(src_addr + 6 * src_stride_z));</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordtype">float</span> d11 = *((__global <span class="keywordtype">float</span> *)(src_addr + 7 * src_stride_z));</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordtype">float</span> d12 = *((__global <span class="keywordtype">float</span> *)(src_addr + 8 * src_stride_z));</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordtype">float</span> d13 = *((__global <span class="keywordtype">float</span> *)(src_addr + 9 * src_stride_z));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordtype">float</span> d14 = *((__global <span class="keywordtype">float</span> *)(src_addr + 10 * src_stride_z));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordtype">float</span> d15 = *((__global <span class="keywordtype">float</span> *)(src_addr + 11 * src_stride_z));</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordtype">float</span> d20 = *((__global <span class="keywordtype">float</span> *)(src_addr + 12 * src_stride_z));</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordtype">float</span> d21 = *((__global <span class="keywordtype">float</span> *)(src_addr + 13 * src_stride_z));</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordtype">float</span> d22 = *((__global <span class="keywordtype">float</span> *)(src_addr + 14 * src_stride_z));</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordtype">float</span> d23 = *((__global <span class="keywordtype">float</span> *)(src_addr + 15 * src_stride_z));</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordtype">float</span> d24 = *((__global <span class="keywordtype">float</span> *)(src_addr + 16 * src_stride_z));</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordtype">float</span> d25 = *((__global <span class="keywordtype">float</span> *)(src_addr + 17 * src_stride_z));</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordtype">float</span> d30 = *((__global <span class="keywordtype">float</span> *)(src_addr + 18 * src_stride_z));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordtype">float</span> d31 = *((__global <span class="keywordtype">float</span> *)(src_addr + 19 * src_stride_z));</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordtype">float</span> d32 = *((__global <span class="keywordtype">float</span> *)(src_addr + 20 * src_stride_z));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordtype">float</span> d33 = *((__global <span class="keywordtype">float</span> *)(src_addr + 21 * src_stride_z));</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordtype">float</span> d34 = *((__global <span class="keywordtype">float</span> *)(src_addr + 22 * src_stride_z));</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordtype">float</span> d35 = *((__global <span class="keywordtype">float</span> *)(src_addr + 23 * src_stride_z));</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">float</span> d40 = *((__global <span class="keywordtype">float</span> *)(src_addr + 24 * src_stride_z));</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordtype">float</span> d41 = *((__global <span class="keywordtype">float</span> *)(src_addr + 25 * src_stride_z));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordtype">float</span> d42 = *((__global <span class="keywordtype">float</span> *)(src_addr + 26 * src_stride_z));</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordtype">float</span> d43 = *((__global <span class="keywordtype">float</span> *)(src_addr + 27 * src_stride_z));</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordtype">float</span> d44 = *((__global <span class="keywordtype">float</span> *)(src_addr + 28 * src_stride_z));</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordtype">float</span> d45 = *((__global <span class="keywordtype">float</span> *)(src_addr + 29 * src_stride_z));</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordtype">float</span> d50 = *((__global <span class="keywordtype">float</span> *)(src_addr + 30 * src_stride_z));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordtype">float</span> d51 = *((__global <span class="keywordtype">float</span> *)(src_addr + 31 * src_stride_z));</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordtype">float</span> d52 = *((__global <span class="keywordtype">float</span> *)(src_addr + 32 * src_stride_z));</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordtype">float</span> d53 = *((__global <span class="keywordtype">float</span> *)(src_addr + 33 * src_stride_z));</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordtype">float</span> d54 = *((__global <span class="keywordtype">float</span> *)(src_addr + 34 * src_stride_z));</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordtype">float</span> d55 = *((__global <span class="keywordtype">float</span> *)(src_addr + 35 * src_stride_z));</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="comment">// Compute out00, out01, out02 and out03</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordtype">float</span> out00 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordtype">float</span> out01 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordtype">float</span> out02 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordtype">float</span> out03 = d01 + d21 + d41 + d11 + d31;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordtype">float</span> k0 = d03 + d04 + d13 + d14 + d23 + d24 + d33 + d34 + d43 + d44;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordtype">float</span> k1 = 2.0f * d03 - 2.0f * d04 + 2.0f * d13 - 2.0f * d14 + 2.0f * d23 - 2.0f * d24 + 2.0f * d33 - 2.0f * d34 + 2.0f * d43 - 2.0f * d44;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    out00 += k0 + d00 + d02 + d10 + d12 + d20 + d22 + d30 + d32 + d40 + d42;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    out01 += k1 - d02 - d12 - d22 - d32 - d42;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    out02 += 4.0f * k0 + d02 + d12 + d22 + d32 + d42;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    out03 += 4.0f * k1 - d02 - d12 - d22 - d32 - d42 + d05 + d15 + d25 + d35 + d45;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="comment">// Compute out10, out11, out12 and out13</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordtype">float</span> out10 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordtype">float</span> out11 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordtype">float</span> out12 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordtype">float</span> out13 = d11 - d21 + 2.0f * d31 - 2.0f * d41;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    k0 = d13 + d14 - d23 - d24 + 2.0f * d33 + 2.0f * d34 - 2.0f * d43 - 2.0f * d44;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    k1 = 2.0f * d13 - 2.0f * d14 - 2.0f * d23 + 2.0f * d24 + 4.0f * d33 - 4.0f * d34 - 4.0f * d43 + 4.0f * d44;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    out10 += k0 + d10 + d12 - d20 - d22 + 2.0f * d30 + 2.0f * d32 - 2.0f * d40 - 2.0f * d42;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    out11 += k1 - d12 + d22 - 2.0f * d32 + 2.0f * d42;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    out12 += 4.0f * k0 + d12 - d22 + 2.0f * d32 - 2.0f * d42;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    out13 += 4.0f * k1 - d12 + d15 + d22 - d25 - 2.0f * d32 + 2.0f * d35 + 2.0f * d42 - 2.0f * d45;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="comment">// Compute out20, out21, out22 and out23</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordtype">float</span> out20 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">float</span> out21 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordtype">float</span> out22 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordtype">float</span> out23 = d11 + d21 + 4.0f * d31 + 4.0f * d41;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    k0 = d13 + d14 + d23 + d24 + 4.0f * d33 + 4.0f * d34 + 4.0f * d43 + 4.0f * d44;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    k1 = 2.0f * d13 - 2.0f * d14 + 2.0f * d23 - 2.0f * d24 + 8.0f * d33 - 8.0f * d34 + 8.0f * d43 - 8.0f * d44;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    out20 += k0 + d10 + d12 + d20 + d22 + 4.0f * d30 + 4.0f * d32 + 4.0f * d40 + 4.0f * d42;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    out21 += k1 - d12 - d22 - 4.0f * d32 - 4.0f * d42;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    out22 += 4.0f * k0 + d12 + d22 + 4.0f * d32 + 4.0f * d42;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    out23 += 4.0f * k1 - d12 + d15 - d22 + d25 - 4.0f * d32 + 4.0f * d35 - 4.0f * d42 + 4.0f * d45;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="comment">// Compute out30, out31, out32 and out33</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">float</span> out30 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordtype">float</span> out31 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordtype">float</span> out32 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordtype">float</span> out33 = d11 - d21 + 8.0f * d31 - 8.0f * d41 + d51;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    k0 = d13 + d14 - d23 - d24 + 8.0f * d33 + 8.0f * d34 - 8.0f * d43 - 8.0f * d44 + d53 + d54;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    k1 = 2.0f * d13 - 2.0f * d14 - 2.0f * d23 + 2.0f * d24 + 16.0f * d33 - 16.0f * d34 - 16.0f * d43 + 16.0f * d44 + 2.0f * d53 - 2.0f * d54;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    out30 += k0 + d10 + d12 - d20 - d22 + 8.0f * d30 + 8.0f * d32 - 8.0f * d40 - 8.0f * d42 + d50 + d52;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    out31 += k1 - d12 + d22 - 8.0f * d32 + 8.0f * d42 - d52;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    out32 += 4.0f * k0 + d12 - d22 + 8.0f * d32 - 8.0f * d42 + d52;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    out33 += 4.0f * k1 - d12 + d15 + d22 - d25 - 8.0f * d32 + 8.0f * d35 + 8.0f * d42 - 8.0f * d45 - d52 + d55;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordtype">int</span> y_in  = get_global_id(1);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordtype">int</span> x_out = get_global_id(0);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordtype">int</span> y_out = (y_in % NUM_TILES_X) * OUTPUT_TILE_W;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordtype">int</span> z_out = (y_in / NUM_TILES_X) * OUTPUT_TILE_H;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordtype">float</span> b = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, x_out)));</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    out00 += (float)b;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    out01 += (float)b;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    out02 += (float)b;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    out03 += (float)b;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="preprocessor">#if !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    out10 += (float)b;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    out11 += (float)b;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    out12 += (float)b;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    out13 += (float)b;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    out20 += (float)b;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    out21 += (float)b;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    out22 += (float)b;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    out23 += (float)b;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    out30 += (float)b;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    out31 += (float)b;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    out32 += (float)b;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    out33 += (float)b;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="preprocessor">#endif // !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    int4 <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (int4)(dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) + y_out * dst_stride_y + z_out * dst_stride_z);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    offset      = min(offset + (int4)(0, 1, 2, 3) * (int4)dst_stride_z, (int4)dst_size); <span class="comment">// If address is beyond the last plane, clamp it to dst_size (which points to the last padding).</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// Store the 1x4 output tile</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s0)) = out00;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s1)) = out01;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s2)) = out02;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s3)) = out03;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor">#elif defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL)</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="comment">// Store the 4x1 output tile</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordtype">int</span> offset = dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(float) + y_out * dst_stride_y + z_out * dst_stride_z;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordtype">int</span> mult_y = min(dst_size - offset, 1);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y * 0 * dst_stride_y + offset)) = out00;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y * 1 * dst_stride_y + offset)) = out01;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y * 2 * dst_stride_y + offset)) = out02;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y * 3 * dst_stride_y + offset)) = out03;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="preprocessor">#else // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL)</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="comment">// Get output address</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    int4 offset = (int4)(dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) + y_out * dst_stride_y + z_out * dst_stride_z);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    offset      = min(offset + (int4)(0, 1, 2, 3) * (int4)dst_stride_z, (int4)dst_size); <span class="comment">// If address is beyond the last plane, clamp it to dst_size (which points to the last padding).</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    int4 mult_y = min((int4)dst_size - offset, (int4)1);                                       <span class="comment">// If out of bound, we don&#39;t want to increase dst_stride_y, so we set the multiplier to 0. It will be 1 otherwise.</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="comment">// Store the 4x4 output tile</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 0 * dst_stride_y + offset.s0)) = out00;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 1 * dst_stride_y + offset.s0)) = out01;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 2 * dst_stride_y + offset.s0)) = out02;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 3 * dst_stride_y + offset.s0)) = out03;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 0 * dst_stride_y + offset.s1)) = out10;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 1 * dst_stride_y + offset.s1)) = out11;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 2 * dst_stride_y + offset.s1)) = out12;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 3 * dst_stride_y + offset.s1)) = out13;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 0 * dst_stride_y + offset.s2)) = out20;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 1 * dst_stride_y + offset.s2)) = out21;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 2 * dst_stride_y + offset.s2)) = out22;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 3 * dst_stride_y + offset.s2)) = out23;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 0 * dst_stride_y + offset.s3)) = out30;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 1 * dst_stride_y + offset.s3)) = out31;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 2 * dst_stride_y + offset.s3)) = out32;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 3 * dst_stride_y + offset.s3)) = out33;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL)</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#define COMPUTE_TMP_COL(col, d0, d1, d2, d3, d4, d5, d6, d7, comm_fact)  \</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="preprocessor">    ({                                                                   \</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="preprocessor">        comm_fact.s0 = d1 + d2;                                          \</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="preprocessor">        comm_fact.s1 = d3 + d4;                                          \</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="preprocessor">        comm_fact.s2 = d5 + d6;                                          \</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">        \</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="preprocessor">        col.s0 = comm_fact.s0 + comm_fact.s1 + 8.f * comm_fact.s2 + d0;  \</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="preprocessor">        col.s2 = comm_fact.s0 + 4.f * comm_fact.s1 + 2.f * comm_fact.s2; \</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="preprocessor">        \</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="preprocessor">        comm_fact.s0 = d1 - d2;                                          \</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor">        comm_fact.s1 = d3 - d4;                                          \</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="preprocessor">        comm_fact.s2 = d5 - d6;                                          \</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="preprocessor">        \</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="preprocessor">        col.s1 = comm_fact.s0 + 2.f * comm_fact.s1 + 4.f * comm_fact.s2; \</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="preprocessor">        col.s3 = comm_fact.s0 + 8.f * comm_fact.s1 + comm_fact.s2 + d7;  \</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x4_5x5_nchw(</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    ,</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;)</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;{</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="comment">// Each thread stores a 4x4/4x1 or 1x4 tile</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">const</span> __global uchar *src_addr = <a class="code" href="helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a>(&amp;src, 0, 0, 0);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="comment">// Compute output address</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordtype">int</span> y_in  = get_global_id(1);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordtype">int</span> x_out = (y_in % NUM_TILES_X) * OUTPUT_TILE_W;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keywordtype">int</span> y_out = (y_in / NUM_TILES_X) * OUTPUT_TILE_H;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordtype">int</span> z_out = get_global_id(0);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(float) + y_out * dst_stride_y + z_out * dst_stride_z;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="comment">// Load the values across the channels to compose the input tile</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordtype">float</span> d00 = *((__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_z));</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordtype">float</span> d01 = *((__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_z));</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordtype">float</span> d02 = *((__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_z));</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordtype">float</span> d03 = *((__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_z));</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordtype">float</span> d04 = *((__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_z));</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordtype">float</span> d05 = *((__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_z));</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordtype">float</span> d06 = *((__global <span class="keywordtype">float</span> *)(src_addr + 6 * src_stride_z));</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordtype">float</span> d07 = *((__global <span class="keywordtype">float</span> *)(src_addr + 7 * src_stride_z));</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="comment">// Compute out00, out01, out02 and out03</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keywordtype">float</span> out00 = d00 + d01 + d02 + d03 + d04 + 8.0f * d05 + 8.0f * d06;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordtype">float</span> out01 = d01 - d02 + 2.0f * d03 - 2.0f * d04 + 4.0f * d05 - 4.0f * d06;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordtype">float</span> out02 = d01 + d02 + 4.0f * d03 + 4.0f * d04 + 2.0f * d05 + 2.0f * d06;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordtype">float</span> out03 = d01 - d02 + 8.0f * d03 - 8.0f * d04 + d05 - d06 + d07;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keywordtype">float</span> b = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, z_out)));</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    out00 += (float)b;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    out01 += (float)b;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    out02 += (float)b;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    out03 += (float)b;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="comment">// Store the output tile</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 0 * dst_stride_y)) = out00;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 1 * dst_stride_y)) = out01;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 2 * dst_stride_y)) = out02;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    *((__global <span class="keywordtype">float</span> *)(dst_addr + 3 * dst_stride_y)) = out03;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    vstore4((float4)(out00, out01, out02, out03), 0, (__global <span class="keywordtype">float</span> *)(dst_addr));</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="preprocessor">#else // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordtype">float</span> d10                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 8 * src_stride_z));</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordtype">float</span> d11                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 9 * src_stride_z));</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordtype">float</span> d12                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 10 * src_stride_z));</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordtype">float</span> d13                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 11 * src_stride_z));</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keywordtype">float</span> d14                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 12 * src_stride_z));</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordtype">float</span> d15                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 13 * src_stride_z));</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordtype">float</span> d16                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 14 * src_stride_z));</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordtype">float</span> d17                                                           = *((__global <span class="keywordtype">float</span> *)(src_addr + 15 * src_stride_z));</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordtype">float</span> d20 = *((__global <span class="keywordtype">float</span> *)(src_addr + 16 * src_stride_z));</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keywordtype">float</span> d21 = *((__global <span class="keywordtype">float</span> *)(src_addr + 17 * src_stride_z));</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordtype">float</span> d22 = *((__global <span class="keywordtype">float</span> *)(src_addr + 18 * src_stride_z));</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordtype">float</span> d23 = *((__global <span class="keywordtype">float</span> *)(src_addr + 19 * src_stride_z));</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordtype">float</span> d24 = *((__global <span class="keywordtype">float</span> *)(src_addr + 20 * src_stride_z));</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordtype">float</span> d25 = *((__global <span class="keywordtype">float</span> *)(src_addr + 21 * src_stride_z));</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordtype">float</span> d26 = *((__global <span class="keywordtype">float</span> *)(src_addr + 22 * src_stride_z));</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keywordtype">float</span> d27 = *((__global <span class="keywordtype">float</span> *)(src_addr + 23 * src_stride_z));</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordtype">float</span> d30 = *((__global <span class="keywordtype">float</span> *)(src_addr + 24 * src_stride_z));</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keywordtype">float</span> d31 = *((__global <span class="keywordtype">float</span> *)(src_addr + 25 * src_stride_z));</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordtype">float</span> d32 = *((__global <span class="keywordtype">float</span> *)(src_addr + 26 * src_stride_z));</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordtype">float</span> d33 = *((__global <span class="keywordtype">float</span> *)(src_addr + 27 * src_stride_z));</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordtype">float</span> d34 = *((__global <span class="keywordtype">float</span> *)(src_addr + 28 * src_stride_z));</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordtype">float</span> d35 = *((__global <span class="keywordtype">float</span> *)(src_addr + 29 * src_stride_z));</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordtype">float</span> d36 = *((__global <span class="keywordtype">float</span> *)(src_addr + 30 * src_stride_z));</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keywordtype">float</span> d37 = *((__global <span class="keywordtype">float</span> *)(src_addr + 31 * src_stride_z));</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordtype">float</span> d40 = *((__global <span class="keywordtype">float</span> *)(src_addr + 32 * src_stride_z));</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordtype">float</span> d41 = *((__global <span class="keywordtype">float</span> *)(src_addr + 33 * src_stride_z));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keywordtype">float</span> d42 = *((__global <span class="keywordtype">float</span> *)(src_addr + 34 * src_stride_z));</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordtype">float</span> d43 = *((__global <span class="keywordtype">float</span> *)(src_addr + 35 * src_stride_z));</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordtype">float</span> d44 = *((__global <span class="keywordtype">float</span> *)(src_addr + 36 * src_stride_z));</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keywordtype">float</span> d45 = *((__global <span class="keywordtype">float</span> *)(src_addr + 37 * src_stride_z));</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordtype">float</span> d46 = *((__global <span class="keywordtype">float</span> *)(src_addr + 38 * src_stride_z));</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordtype">float</span> d47 = *((__global <span class="keywordtype">float</span> *)(src_addr + 39 * src_stride_z));</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordtype">float</span> d50 = *((__global <span class="keywordtype">float</span> *)(src_addr + 40 * src_stride_z));</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordtype">float</span> d51 = *((__global <span class="keywordtype">float</span> *)(src_addr + 41 * src_stride_z));</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keywordtype">float</span> d52 = *((__global <span class="keywordtype">float</span> *)(src_addr + 42 * src_stride_z));</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordtype">float</span> d53 = *((__global <span class="keywordtype">float</span> *)(src_addr + 43 * src_stride_z));</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keywordtype">float</span> d54 = *((__global <span class="keywordtype">float</span> *)(src_addr + 44 * src_stride_z));</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordtype">float</span> d55 = *((__global <span class="keywordtype">float</span> *)(src_addr + 45 * src_stride_z));</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordtype">float</span> d56 = *((__global <span class="keywordtype">float</span> *)(src_addr + 46 * src_stride_z));</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keywordtype">float</span> d57 = *((__global <span class="keywordtype">float</span> *)(src_addr + 47 * src_stride_z));</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordtype">float</span> d60 = *((__global <span class="keywordtype">float</span> *)(src_addr + 48 * src_stride_z));</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordtype">float</span> d61 = *((__global <span class="keywordtype">float</span> *)(src_addr + 49 * src_stride_z));</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordtype">float</span> d62 = *((__global <span class="keywordtype">float</span> *)(src_addr + 50 * src_stride_z));</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordtype">float</span> d63 = *((__global <span class="keywordtype">float</span> *)(src_addr + 51 * src_stride_z));</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordtype">float</span> d64 = *((__global <span class="keywordtype">float</span> *)(src_addr + 52 * src_stride_z));</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keywordtype">float</span> d65 = *((__global <span class="keywordtype">float</span> *)(src_addr + 53 * src_stride_z));</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordtype">float</span> d66 = *((__global <span class="keywordtype">float</span> *)(src_addr + 54 * src_stride_z));</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keywordtype">float</span> d67 = *((__global <span class="keywordtype">float</span> *)(src_addr + 55 * src_stride_z));</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordtype">float</span> d70 = *((__global <span class="keywordtype">float</span> *)(src_addr + 56 * src_stride_z));</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordtype">float</span> d71 = *((__global <span class="keywordtype">float</span> *)(src_addr + 57 * src_stride_z));</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="keywordtype">float</span> d72 = *((__global <span class="keywordtype">float</span> *)(src_addr + 58 * src_stride_z));</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keywordtype">float</span> d73 = *((__global <span class="keywordtype">float</span> *)(src_addr + 59 * src_stride_z));</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordtype">float</span> d74 = *((__global <span class="keywordtype">float</span> *)(src_addr + 60 * src_stride_z));</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keywordtype">float</span> d75 = *((__global <span class="keywordtype">float</span> *)(src_addr + 61 * src_stride_z));</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordtype">float</span> d76 = *((__global <span class="keywordtype">float</span> *)(src_addr + 62 * src_stride_z));</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordtype">float</span> d77 = *((__global <span class="keywordtype">float</span> *)(src_addr + 63 * src_stride_z));</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="comment">// Compute the 8x4 intermediate tensor</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    float4 comm_fact0, comm_fact1, comm_fact2;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    float4 tmp_col0, tmp_col1, tmp_col2, tmp_col3, tmp_col4, tmp_col5, tmp_col6, tmp_col7;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    COMPUTE_TMP_COL(tmp_col0, d00, d10, d20, d30, d40, d50, d60, d70, comm_fact0);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    COMPUTE_TMP_COL(tmp_col1, d01, d11, d21, d31, d41, d51, d61, d71, comm_fact0);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    COMPUTE_TMP_COL(tmp_col2, d02, d12, d22, d32, d42, d52, d62, d72, comm_fact0);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    COMPUTE_TMP_COL(tmp_col3, d03, d13, d23, d33, d43, d53, d63, d73, comm_fact0);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    COMPUTE_TMP_COL(tmp_col4, d04, d14, d24, d34, d44, d54, d64, d74, comm_fact0);</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    COMPUTE_TMP_COL(tmp_col5, d05, d15, d25, d35, d45, d55, d65, d75, comm_fact0);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    COMPUTE_TMP_COL(tmp_col6, d06, d16, d26, d36, d46, d56, d66, d76, comm_fact0);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    COMPUTE_TMP_COL(tmp_col7, d07, d17, d27, d37, d47, d57, d67, d77, comm_fact0);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="comment">// Compute the 4x4 output tile</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    comm_fact0 = tmp_col1 + tmp_col2;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    comm_fact1 = tmp_col3 + tmp_col4;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    comm_fact2 = tmp_col5 + tmp_col6;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    float4 out_col0 = comm_fact0 + comm_fact1 + 8.f * comm_fact2 + tmp_col0;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    float4 out_col2 = comm_fact0 + 4.f * comm_fact1 + 2.f * comm_fact2;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    comm_fact0 = tmp_col1 - tmp_col2;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    comm_fact1 = tmp_col3 - tmp_col4;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    comm_fact2 = tmp_col5 - tmp_col6;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    float4 out_col1 = comm_fact0 + 2.f * comm_fact1 + 4.f * comm_fact2;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    float4 out_col3 = comm_fact0 + 8.f * comm_fact1 + comm_fact2 + tmp_col7;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keywordtype">float</span> b = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, z_out)));</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    out_col0 += (float4)b;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    out_col1 += (float4)b;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    out_col2 += (float4)b;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    out_col3 += (float4)b;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="comment">// Store the output tile</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    vstore4((float4)(out_col0.s0, out_col1.s0, out_col2.s0, out_col3.s0), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 0 * dst_stride_y));</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    vstore4((float4)(out_col0.s1, out_col1.s1, out_col2.s1, out_col3.s1), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 1 * dst_stride_y));</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    vstore4((float4)(out_col0.s2, out_col1.s2, out_col2.s2, out_col3.s2), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 2 * dst_stride_y));</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    vstore4((float4)(out_col0.s3, out_col1.s3, out_col2.s3, out_col3.s3), 0, (__global <span class="keywordtype">float</span> *)(dst_addr + 3 * dst_stride_y));</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="preprocessor">#endif // !defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) &amp;&amp; !defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;}</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x4_5x5_nhwc(</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias),</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keywordtype">int</span> dst_size)</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;{</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="comment">// Each thread stores a 4x4/4x1 or 1x4 tile</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <span class="keyword">const</span> __global uchar *src_addr = <a class="code" href="helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a>(&amp;src, 0, 0, 0);</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="keywordtype">int</span> y_in  = get_global_id(1);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keywordtype">int</span> x_out = get_global_id(0);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <span class="keywordtype">int</span> y_out = (y_in % NUM_TILES_X) * OUTPUT_TILE_W;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keywordtype">int</span> z_out = (y_in / NUM_TILES_X) * OUTPUT_TILE_H;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="comment">// Load the values across the channels to compose the input tile</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keywordtype">float</span> d00 = *((__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_z));</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="keywordtype">float</span> d01 = *((__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_z));</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    <span class="keywordtype">float</span> d02 = *((__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_z));</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keywordtype">float</span> d03 = *((__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_z));</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keywordtype">float</span> d04 = *((__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_z));</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="keywordtype">float</span> d05 = *((__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_z));</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keywordtype">float</span> d06 = *((__global <span class="keywordtype">float</span> *)(src_addr + 6 * src_stride_z));</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <span class="keywordtype">float</span> d07 = *((__global <span class="keywordtype">float</span> *)(src_addr + 7 * src_stride_z));</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="comment">// Compute out00, out01, out02 and out03</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keywordtype">float</span> out00 = d00 + d01 + d02 + d03 + d04 + 8.0f * d05 + 8.0f * d06;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keywordtype">float</span> out01 = d01 - d02 + 2.0f * d03 - 2.0f * d04 + 4.0f * d05 - 4.0f * d06;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keywordtype">float</span> out02 = d01 + d02 + 4.0f * d03 + 4.0f * d04 + 2.0f * d05 + 2.0f * d06;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keywordtype">float</span> out03 = d01 - d02 + 8.0f * d03 - 8.0f * d04 + d05 - d06 + d07;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordtype">float</span> b = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, x_out)));</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    out00 += (float)b;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    out01 += (float)b;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    out02 += (float)b;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    out03 += (float)b;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="comment">// Store the output tile</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="comment">// Get output address</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    int4 offset = (int4)(dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) + y_out * dst_stride_y + z_out * dst_stride_z);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    offset      = min(offset + (int4)(0, 1, 2, 3) * (int4)dst_stride_z, (int4)dst_size); <span class="comment">// If address is beyond the last plane, clamp it to dst_size (which points to the last padding).</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s0) = out00;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s1) = out01;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s2) = out02;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + offset.s3) = out03;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="preprocessor">#else  // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <span class="comment">// Get output address</span></div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordtype">int</span> offset = dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(float) + y_out * dst_stride_y + z_out * dst_stride_z;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + 0 * dst_stride_y + offset) = out00;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + 1 * dst_stride_y + offset) = out01;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + 2 * dst_stride_y + offset) = out02;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + 3 * dst_stride_y + offset) = out03;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="preprocessor">#else // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keywordtype">float</span> d10 = *((__global <span class="keywordtype">float</span> *)(src_addr + 8 * src_stride_z));</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keywordtype">float</span> d11 = *((__global <span class="keywordtype">float</span> *)(src_addr + 9 * src_stride_z));</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keywordtype">float</span> d12 = *((__global <span class="keywordtype">float</span> *)(src_addr + 10 * src_stride_z));</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keywordtype">float</span> d13 = *((__global <span class="keywordtype">float</span> *)(src_addr + 11 * src_stride_z));</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keywordtype">float</span> d14 = *((__global <span class="keywordtype">float</span> *)(src_addr + 12 * src_stride_z));</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keywordtype">float</span> d15 = *((__global <span class="keywordtype">float</span> *)(src_addr + 13 * src_stride_z));</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keywordtype">float</span> d16 = *((__global <span class="keywordtype">float</span> *)(src_addr + 14 * src_stride_z));</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="keywordtype">float</span> d17 = *((__global <span class="keywordtype">float</span> *)(src_addr + 15 * src_stride_z));</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keywordtype">float</span> d20 = *((__global <span class="keywordtype">float</span> *)(src_addr + 16 * src_stride_z));</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="keywordtype">float</span> d21 = *((__global <span class="keywordtype">float</span> *)(src_addr + 17 * src_stride_z));</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="keywordtype">float</span> d22 = *((__global <span class="keywordtype">float</span> *)(src_addr + 18 * src_stride_z));</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keywordtype">float</span> d23 = *((__global <span class="keywordtype">float</span> *)(src_addr + 19 * src_stride_z));</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="keywordtype">float</span> d24 = *((__global <span class="keywordtype">float</span> *)(src_addr + 20 * src_stride_z));</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="keywordtype">float</span> d25 = *((__global <span class="keywordtype">float</span> *)(src_addr + 21 * src_stride_z));</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keywordtype">float</span> d26 = *((__global <span class="keywordtype">float</span> *)(src_addr + 22 * src_stride_z));</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keywordtype">float</span> d27 = *((__global <span class="keywordtype">float</span> *)(src_addr + 23 * src_stride_z));</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordtype">float</span> d30 = *((__global <span class="keywordtype">float</span> *)(src_addr + 24 * src_stride_z));</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="keywordtype">float</span> d31 = *((__global <span class="keywordtype">float</span> *)(src_addr + 25 * src_stride_z));</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <span class="keywordtype">float</span> d32 = *((__global <span class="keywordtype">float</span> *)(src_addr + 26 * src_stride_z));</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordtype">float</span> d33 = *((__global <span class="keywordtype">float</span> *)(src_addr + 27 * src_stride_z));</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keywordtype">float</span> d34 = *((__global <span class="keywordtype">float</span> *)(src_addr + 28 * src_stride_z));</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordtype">float</span> d35 = *((__global <span class="keywordtype">float</span> *)(src_addr + 29 * src_stride_z));</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keywordtype">float</span> d36 = *((__global <span class="keywordtype">float</span> *)(src_addr + 30 * src_stride_z));</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordtype">float</span> d37 = *((__global <span class="keywordtype">float</span> *)(src_addr + 31 * src_stride_z));</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="keywordtype">float</span> d40 = *((__global <span class="keywordtype">float</span> *)(src_addr + 32 * src_stride_z));</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keywordtype">float</span> d41 = *((__global <span class="keywordtype">float</span> *)(src_addr + 33 * src_stride_z));</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keywordtype">float</span> d42 = *((__global <span class="keywordtype">float</span> *)(src_addr + 34 * src_stride_z));</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keywordtype">float</span> d43 = *((__global <span class="keywordtype">float</span> *)(src_addr + 35 * src_stride_z));</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="keywordtype">float</span> d44 = *((__global <span class="keywordtype">float</span> *)(src_addr + 36 * src_stride_z));</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keywordtype">float</span> d45 = *((__global <span class="keywordtype">float</span> *)(src_addr + 37 * src_stride_z));</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keywordtype">float</span> d46 = *((__global <span class="keywordtype">float</span> *)(src_addr + 38 * src_stride_z));</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keywordtype">float</span> d47 = *((__global <span class="keywordtype">float</span> *)(src_addr + 39 * src_stride_z));</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keywordtype">float</span> d50 = *((__global <span class="keywordtype">float</span> *)(src_addr + 40 * src_stride_z));</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keywordtype">float</span> d51 = *((__global <span class="keywordtype">float</span> *)(src_addr + 41 * src_stride_z));</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordtype">float</span> d52 = *((__global <span class="keywordtype">float</span> *)(src_addr + 42 * src_stride_z));</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keywordtype">float</span> d53 = *((__global <span class="keywordtype">float</span> *)(src_addr + 43 * src_stride_z));</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="keywordtype">float</span> d54 = *((__global <span class="keywordtype">float</span> *)(src_addr + 44 * src_stride_z));</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordtype">float</span> d55 = *((__global <span class="keywordtype">float</span> *)(src_addr + 45 * src_stride_z));</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordtype">float</span> d56 = *((__global <span class="keywordtype">float</span> *)(src_addr + 46 * src_stride_z));</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <span class="keywordtype">float</span> d57 = *((__global <span class="keywordtype">float</span> *)(src_addr + 47 * src_stride_z));</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordtype">float</span> d60 = *((__global <span class="keywordtype">float</span> *)(src_addr + 48 * src_stride_z));</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keywordtype">float</span> d61 = *((__global <span class="keywordtype">float</span> *)(src_addr + 49 * src_stride_z));</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keywordtype">float</span> d62 = *((__global <span class="keywordtype">float</span> *)(src_addr + 50 * src_stride_z));</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keywordtype">float</span> d63 = *((__global <span class="keywordtype">float</span> *)(src_addr + 51 * src_stride_z));</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keywordtype">float</span> d64 = *((__global <span class="keywordtype">float</span> *)(src_addr + 52 * src_stride_z));</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="keywordtype">float</span> d65 = *((__global <span class="keywordtype">float</span> *)(src_addr + 53 * src_stride_z));</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keywordtype">float</span> d66 = *((__global <span class="keywordtype">float</span> *)(src_addr + 54 * src_stride_z));</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordtype">float</span> d67 = *((__global <span class="keywordtype">float</span> *)(src_addr + 55 * src_stride_z));</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keywordtype">float</span> d70 = *((__global <span class="keywordtype">float</span> *)(src_addr + 56 * src_stride_z));</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keywordtype">float</span> d71 = *((__global <span class="keywordtype">float</span> *)(src_addr + 57 * src_stride_z));</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordtype">float</span> d72 = *((__global <span class="keywordtype">float</span> *)(src_addr + 58 * src_stride_z));</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordtype">float</span> d73 = *((__global <span class="keywordtype">float</span> *)(src_addr + 59 * src_stride_z));</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <span class="keywordtype">float</span> d74 = *((__global <span class="keywordtype">float</span> *)(src_addr + 60 * src_stride_z));</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <span class="keywordtype">float</span> d75 = *((__global <span class="keywordtype">float</span> *)(src_addr + 61 * src_stride_z));</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordtype">float</span> d76 = *((__global <span class="keywordtype">float</span> *)(src_addr + 62 * src_stride_z));</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordtype">float</span> d77 = *((__global <span class="keywordtype">float</span> *)(src_addr + 63 * src_stride_z));</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="comment">// Compute the 8x4 intermediate tensor</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    float4 comm_fact0, comm_fact1, comm_fact2;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    float4 tmp_col0, tmp_col1, tmp_col2, tmp_col3, tmp_col4, tmp_col5, tmp_col6, tmp_col7;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    COMPUTE_TMP_COL(tmp_col0, d00, d10, d20, d30, d40, d50, d60, d70, comm_fact0);</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    COMPUTE_TMP_COL(tmp_col1, d01, d11, d21, d31, d41, d51, d61, d71, comm_fact0);</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    COMPUTE_TMP_COL(tmp_col2, d02, d12, d22, d32, d42, d52, d62, d72, comm_fact0);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    COMPUTE_TMP_COL(tmp_col3, d03, d13, d23, d33, d43, d53, d63, d73, comm_fact0);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    COMPUTE_TMP_COL(tmp_col4, d04, d14, d24, d34, d44, d54, d64, d74, comm_fact0);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    COMPUTE_TMP_COL(tmp_col5, d05, d15, d25, d35, d45, d55, d65, d75, comm_fact0);</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    COMPUTE_TMP_COL(tmp_col6, d06, d16, d26, d36, d46, d56, d66, d76, comm_fact0);</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    COMPUTE_TMP_COL(tmp_col7, d07, d17, d27, d37, d47, d57, d67, d77, comm_fact0);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="comment">// Compute the output tile</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    comm_fact0 = tmp_col1 + tmp_col2;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    comm_fact1 = tmp_col3 + tmp_col4;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    comm_fact2 = tmp_col5 + tmp_col6;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    float4 out_col0 = comm_fact0 + comm_fact1 + 8.f * comm_fact2 + tmp_col0;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    float4 out_col2 = comm_fact0 + 4.f * comm_fact1 + 2.f * comm_fact2;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    comm_fact0 = tmp_col1 - tmp_col2;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    comm_fact1 = tmp_col3 - tmp_col4;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    comm_fact2 = tmp_col5 - tmp_col6;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    float4 out_col1 = comm_fact0 + 2.f * comm_fact1 + 4.f * comm_fact2;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    float4 out_col3 = comm_fact0 + 8.f * comm_fact1 + comm_fact2 + tmp_col7;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    <span class="comment">// Add bias</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> bias = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(bias);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keywordtype">float</span> b = (float) * ((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;bias, x_out)));</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    out_col0 += (float4)b;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    out_col1 += (float4)b;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    out_col2 += (float4)b;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    out_col3 += (float4)b;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="comment">// Get output address</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    int4 offset = (int4)(dst_offset_first_element_in_bytes + x_out * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) + y_out * dst_stride_y + z_out * dst_stride_z);</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    offset      = min(offset + (int4)(0, 1, 2, 3) * (int4)dst_stride_z, (int4)dst_size); <span class="comment">// If address is beyond the last plane, clamp it to dst_size (which points to the last padding).</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    int4 mult_y = min((int4)dst_size - offset, (int4)1);                                 <span class="comment">// If out of bound, we don&#39;t want to increase dst_stride_y, so we set the multiplier to 0. It will be 1 otherwise.</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <span class="comment">// Store the output tile</span></div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 0 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s0) = out_col0.s0;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 1 * (int)dst_stride_y + offset.s0) = out_col1.s0;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 2 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s0) = out_col2.s0;</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s0 * 3 * (int)dst_stride_y + offset.s0) = out_col3.s0;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 0 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s1) = out_col0.s1;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 1 * (int)dst_stride_y + offset.s1) = out_col1.s1;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 2 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s1) = out_col2.s1;</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s1 * 3 * (int)dst_stride_y + offset.s1) = out_col3.s1;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 0 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s2) = out_col0.s2;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 1 * (int)dst_stride_y + offset.s2) = out_col1.s2;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 2 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s2) = out_col2.s2;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s2 * 3 * (int)dst_stride_y + offset.s2) = out_col3.s2;</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 0 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s3) = out_col0.s3;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 1 * (int)dst_stride_y + offset.s3) = out_col1.s3;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 2 * (<span class="keywordtype">int</span>)dst_stride_y + offset.s3) = out_col2.s3;</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    *(__global <span class="keywordtype">float</span> *)(dst_ptr + mult_y.s3 * 3 * (int)dst_stride_y + offset.s3) = out_col3.s3;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL) || defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;}</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL)</span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_2x1_3x1_nchw(</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    ,</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;)</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;{</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    winograd_output_transform_2x2_3x3_nchw(src_ptr,</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                                           dst_offset_first_element_in_bytes</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                           ,</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                           bias_offset_first_element_in_bytes</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                                          );</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;}</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x1_3x1_nchw(</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    ,</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;)</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;{</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    winograd_output_transform_4x4_3x3_nchw(src_ptr,</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                                           dst_offset_first_element_in_bytes</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                                           ,</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                                           bias_offset_first_element_in_bytes</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                                          );</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;}</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x1_5x1_nchw(</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    ,</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;)</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;{</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    winograd_output_transform_4x4_5x5_nchw(src_ptr,</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                                           dst_offset_first_element_in_bytes</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                                           ,</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;                                           bias_offset_first_element_in_bytes</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;                                          );</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;}</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x1_3x1_nhwc(</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias),</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <span class="keywordtype">int</span> dst_size)</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;{</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    winograd_output_transform_4x4_3x3_nhwc(src_ptr,</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                           dst_offset_first_element_in_bytes,</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                                           bias_offset_first_element_in_bytes,</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                                           dst_size);</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;}</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_4x1_5x1_nhwc(</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias),</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="keywordtype">int</span> dst_size)</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;{</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    winograd_output_transform_4x4_5x5_nhwc(src_ptr,</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                                           dst_offset_first_element_in_bytes,</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                                           bias_offset_first_element_in_bytes,</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                                           dst_size);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;}</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_HORIZONTAL)</span></div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;<span class="preprocessor">#if defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_1x2_1x3_nchw(</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    ,</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;)</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;{</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    winograd_output_transform_2x2_3x3_nchw(src_ptr,</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;                                           dst_offset_first_element_in_bytes</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                                           ,</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                                           bias_offset_first_element_in_bytes</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;                                          );</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;}</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_1x4_1x3_nchw(</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    ,</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;)</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;{</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    winograd_output_transform_4x4_3x3_nchw(src_ptr,</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;                                           dst_offset_first_element_in_bytes</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;                                           ,</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;                                           bias_offset_first_element_in_bytes</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;                                          );</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;}</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_1x4_1x5_nchw(</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    ,</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias)</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;)</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;{</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    winograd_output_transform_4x4_5x5_nchw(src_ptr,</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                                           dst_offset_first_element_in_bytes</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;                                           ,</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                                           bias_offset_first_element_in_bytes</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;                                          );</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;}</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_1x4_1x3_nhwc(</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias),</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordtype">int</span> dst_size)</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;{</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    winograd_output_transform_4x4_3x3_nhwc(src_ptr,</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;                                           dst_offset_first_element_in_bytes,</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;                                           bias_offset_first_element_in_bytes,</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;                                           dst_size);</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;}</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;__kernel <span class="keywordtype">void</span> winograd_output_transform_1x4_1x5_nhwc(</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(bias),</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    <span class="keywordtype">int</span> dst_size)</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;{</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;    winograd_output_transform_4x4_5x5_nhwc(src_ptr,</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;                                           src_stride_x,</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;                                           src_step_x,</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;                                           src_stride_y,</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;                                           src_step_y,</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;                                           src_stride_z,</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;                                           src_step_z,</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;                                           src_offset_first_element_in_bytes,</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;                                           dst_ptr,</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;                                           dst_stride_x,</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;                                           dst_step_x,</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;                                           dst_stride_y,</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;                                           dst_step_y,</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;                                           dst_stride_z,</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;                                           dst_step_z,</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;                                           dst_offset_first_element_in_bytes,</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;                                           bias_ptr,</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;                                           bias_stride_x,</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;                                           bias_step_x,</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;                                           bias_offset_first_element_in_bytes,</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;#endif <span class="comment">// defined(HAS_BIAS)</span></div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;                                           dst_size);</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;}</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;<span class="preprocessor">#endif // defined(WINOGRAD_OUTPUT_TRANSFORM_VERTICAL)</span></div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;<span class="preprocessor">#endif // defined(NUM_TILES_X) &amp;&amp; defined(OUTPUT_TILE_W) &amp;&amp; defined(OUTPUT_TILE_H)</span></div><div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00142">helpers.h:142</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00127">helpers.h:127</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00159">helpers.h:159</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00311">helpers.h:311</a></div></div>
<div class="ttc" id="helpers_8h_xhtml"><div class="ttname"><a href="helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a2101b2fe0193ce227ae4e0945e321d85"><div class="ttname"><a href="helpers_8h.xhtml#a2101b2fe0193ce227ae4e0945e321d85">tensor3D_offset</a></div><div class="ttdeci">__global const uchar * tensor3D_offset(const Tensor3D *tensor, int x, int y, int z)</div><div class="ttdoc">Get the pointer position of a Tensor3D. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00323">helpers.h:323</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00070">helpers.h:70</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_division_8cpp_source.xhtml#l00100">ArithmeticDivision.cpp:100</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00084">helpers.h:84</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a64d779f80eeb923e0ab2313433f7b40b"><div class="ttname"><a href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT_NO_STEP(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00109">helpers.h:109</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a7e4940407322d6f0ccb8b6b86b856019"><div class="ttname"><a href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a></div><div class="ttdeci">__global const uchar * vector_offset(const Vector *vec, int x)</div><div class="ttdoc">Get the pointer position of a Vector. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00300">helpers.h:300</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b8004eef325a40dd43eb80755610fff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">arm_compute::test::validation::b</a></div><div class="ttdeci">CLTensor b</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00091">GEMM.cpp:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6743f0a130e8311e6f5b1a23df102472"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">arm_compute::test::validation::src</a></div><div class="ttdeci">convolution configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_8cpp_source.xhtml#l00147">Convolution.cpp:147</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="winograd__output__transform_8cl.xhtml">winograd_output_transform.cl</a></li>
    <li class="footer">Generated on Wed Aug 29 2018 15:31:30 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
