<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::utility Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1utility.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::utility Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1utility_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab7c665e19081aef1a68ec0090b4c7be6"><td class="memTemplParams" colspan="2">template&lt;std::size_t N, typename Iterator &gt; </td></tr>
<tr class="memitem:ab7c665e19081aef1a68ec0090b4c7be6"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; typename std::iterator_traits&lt; <a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> &gt;::value_type, N &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#ab7c665e19081aef1a68ec0090b4c7be6">make_array</a> (<a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> first, <a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> last)</td></tr>
<tr class="separator:ab7c665e19081aef1a68ec0090b4c7be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12c3c62f510452805c289e180ec78bb7"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a12c3c62f510452805c289e180ec78bb7"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">clamp</a> (const T &amp;n, const T &amp;lower, const T &amp;upper)</td></tr>
<tr class="memdesc:a12c3c62f510452805c289e180ec78bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs clamping among a lower and upper value.  <a href="#a12c3c62f510452805c289e180ec78bb7">More...</a><br /></td></tr>
<tr class="separator:a12c3c62f510452805c289e180ec78bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a067ebd28103d827b6ec17032e2344064"><td class="memTemplParams" colspan="2">template&lt;typename F &gt; </td></tr>
<tr class="memitem:a067ebd28103d827b6ec17032e2344064"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">for_each</a> (F &amp;&amp;)</td></tr>
<tr class="memdesc:a067ebd28103d827b6ec17032e2344064"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of for_each.  <a href="#a067ebd28103d827b6ec17032e2344064">More...</a><br /></td></tr>
<tr class="separator:a067ebd28103d827b6ec17032e2344064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e384f81bb641de61df2800a432c51fe"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a1e384f81bb641de61df2800a432c51fe"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a1e384f81bb641de61df2800a432c51fe">for_each</a> (F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a1e384f81bb641de61df2800a432c51fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call the function for each of the arguments.  <a href="#a1e384f81bb641de61df2800a432c51fe">More...</a><br /></td></tr>
<tr class="separator:a1e384f81bb641de61df2800a432c51fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T &gt; </td></tr>
<tr class="memitem:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="memTemplItemLeft" align="right" valign="top">T &amp;&amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">foldl</a> (F &amp;&amp;, T &amp;&amp;value)</td></tr>
<tr class="memdesc:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="#a043270c1f50c73bf9f91fcc4570ccf0c">More...</a><br /></td></tr>
<tr class="separator:a043270c1f50c73bf9f91fcc4570ccf0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9639bdb9769d758f0a582ba27c4e63"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename U , typename... Us&gt; </td></tr>
<tr class="memitem:a9a9639bdb9769d758f0a582ba27c4e63"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a9a9639bdb9769d758f0a582ba27c4e63">foldl</a> (F &amp;&amp;func, T &amp;&amp;initial, U &amp;&amp;value, Us &amp;&amp;... values) -&gt; decltype(func(std::forward&lt; T &gt;(initial), std::forward&lt; U &gt;(value)))</td></tr>
<tr class="memdesc:a9a9639bdb9769d758f0a582ba27c4e63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fold left.  <a href="#a9a9639bdb9769d758f0a582ba27c4e63">More...</a><br /></td></tr>
<tr class="separator:a9a9639bdb9769d758f0a582ba27c4e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26bf8243169fc3fd2299024c25b0aa0d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:a26bf8243169fc3fd2299024c25b0aa0d"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a26bf8243169fc3fd2299024c25b0aa0d">saturate_cast</a> (U val)</td></tr>
<tr class="memdesc:a26bf8243169fc3fd2299024c25b0aa0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type cast with saturation.  <a href="#a26bf8243169fc3fd2299024c25b0aa0d">More...</a><br /></td></tr>
<tr class="separator:a26bf8243169fc3fd2299024c25b0aa0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c1a72cd100958036bb59f0625f0613f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0c1a72cd100958036bb59f0625f0613f"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; size_t &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a0c1a72cd100958036bb59f0625f0613f">sort_indices</a> (const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="memdesc:a0c1a72cd100958036bb59f0625f0613f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform an index sort of a given vector.  <a href="#a0c1a72cd100958036bb59f0625f0613f">More...</a><br /></td></tr>
<tr class="separator:a0c1a72cd100958036bb59f0625f0613f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cd4923f17276faa2f7a1a60e7acb17"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#af8cd4923f17276faa2f7a1a60e7acb17">endswith</a> (const std::string &amp;str, const std::string &amp;suffix)</td></tr>
<tr class="memdesc:af8cd4923f17276faa2f7a1a60e7acb17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if a string contains a given suffix.  <a href="#af8cd4923f17276faa2f7a1a60e7acb17">More...</a><br /></td></tr>
<tr class="separator:af8cd4923f17276faa2f7a1a60e7acb17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eed476cf46a22a3ce6ebd8ba22e8945"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#a9eed476cf46a22a3ce6ebd8ba22e8945">check_aligned</a> (void *ptr, const size_t alignment)</td></tr>
<tr class="memdesc:a9eed476cf46a22a3ce6ebd8ba22e8945"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if a pointer complies with a given alignment.  <a href="#a9eed476cf46a22a3ce6ebd8ba22e8945">More...</a><br /></td></tr>
<tr class="separator:a9eed476cf46a22a3ce6ebd8ba22e8945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb96ad5c7071ec3a47ea5f07e817a636"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">tolower</a> (std::string string)</td></tr>
<tr class="memdesc:abb96ad5c7071ec3a47ea5f07e817a636"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string to lower case.  <a href="#abb96ad5c7071ec3a47ea5f07e817a636">More...</a><br /></td></tr>
<tr class="separator:abb96ad5c7071ec3a47ea5f07e817a636"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a9eed476cf46a22a3ce6ebd8ba22e8945"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eed476cf46a22a3ce6ebd8ba22e8945">&#9670;&nbsp;</a></span>check_aligned()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::utility::check_aligned </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if a pointer complies with a given alignment. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Alignment value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the pointer is aligned else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00191">191</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00085">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> (reinterpret_cast&lt;std::uintptr_t&gt;(ptr) % alignment) == 0;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a12c3c62f510452805c289e180ec78bb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12c3c62f510452805c289e180ec78bb7">&#9670;&nbsp;</a></span>clamp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::utility::clamp </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>upper</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Performs clamping among a lower and upper value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Value to clamp. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lower</td><td>Lower threshold. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">upper</td><td>Upper threshold.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Clamped value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00084">84</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="warp__helpers_8h_source.xhtml#l00034">clamp_to_border_with_size()</a>, <a class="el" href="warp__helpers__quantized_8h_source.xhtml#l00034">clamp_to_border_with_size_quantized()</a>, <a class="el" href="reference_2_r_o_i_align_layer_8cpp_source.xhtml#l00117">arm_compute::test::validation::reference::roi_align_layer()</a>, <a class="el" href="roi__pooling__layer_8cl_source.xhtml#l00123">roi_pooling_layer()</a>, <a class="el" href="_utility_8h_source.xhtml#l00140">saturate_cast()</a>, <a class="el" href="scale_8cl_source.xhtml#l00207">scale_bilinear_nhwc()</a>, <a class="el" href="scale__quantized_8cl_source.xhtml#l00116">scale_bilinear_quantized_nhwc()</a>, <a class="el" href="scale_8cl_source.xhtml#l00162">scale_nearest_neighbour_nhwc()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00091">arm_compute::helpers::tensor_transform::strided_slice_absolute_end_coords()</a>, and <a class="el" href="tensor__transform_8cpp_source.xhtml#l00056">arm_compute::helpers::tensor_transform::strided_slice_absolute_start_coords()</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> std::max(lower, std::min(n, upper));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af8cd4923f17276faa2f7a1a60e7acb17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8cd4923f17276faa2f7a1a60e7acb17">&#9670;&nbsp;</a></span>endswith()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::utility::endswith </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>suffix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if a string contains a given suffix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>Input string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">suffix</td><td>Suffix to check for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the string ends with the given suffix else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00175">175</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8h_source.xhtml#l00408">arm_compute::graph_utils::get_input_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">if</span>(str.size() &lt; suffix.size())</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> std::equal(suffix.rbegin(), suffix.rend(), str.rbegin());</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a043270c1f50c73bf9f91fcc4570ccf0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a043270c1f50c73bf9f91fcc4570ccf0c">&#9670;&nbsp;</a></span>foldl() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T&amp;&amp; arm_compute::utility::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of foldl. </p>
<dl class="section return"><dt>Returns</dt><dd>value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00113">113</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00469">arm_compute::intersect_valid_regions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> std::forward&lt;T&gt;(value);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9a9639bdb9769d758f0a582ba27c4e63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a9639bdb9769d758f0a582ba27c4e63">&#9670;&nbsp;</a></span>foldl() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto arm_compute::utility::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>initial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Us &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype(func(std::forward&lt;T&gt;(initial), std::forward&lt;U&gt;(value)))
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fold left. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Function to be called </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">initial</td><td>Initial value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Argument passed to the function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Remaining arguments </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#a9a9639bdb9769d758f0a582ba27c4e63">foldl</a>(std::forward&lt;F&gt;(func), func(std::forward&lt;T&gt;(initial), std::forward&lt;U&gt;(value)), std::forward&lt;Us&gt;(values)...);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a9a9639bdb9769d758f0a582ba27c4e63"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a9a9639bdb9769d758f0a582ba27c4e63">arm_compute::utility::foldl</a></div><div class="ttdeci">auto foldl(F &amp;&amp;func, T &amp;&amp;initial, U &amp;&amp;value, Us &amp;&amp;... values) -&gt; decltype(func(std::forward&lt; T &gt;(initial), std::forward&lt; U &gt;(value)))</div><div class="ttdoc">Fold left. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00126">Utility.h:126</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a067ebd28103d827b6ec17032e2344064"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a067ebd28103d827b6ec17032e2344064">&#9670;&nbsp;</a></span>for_each() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utility::for_each </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of for_each. </p>
<p>Does nothing. </p>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00091">91</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_shape_8h_source.xhtml#l00210">TensorShape::broadcast_shape()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00247">ITensorInfo::broadcast_shape_and_valid_region()</a>, <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00252">arm_compute::graph::detail::call_all_output_node_accessors()</a>, <a class="el" href="_layers_8h_source.xhtml#l00227">ConcatLayer::ConcatLayer()</a>, <a class="el" href="_utility_8h_source.xhtml#l00102">for_each()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00106">GroupedConvolutionMutator::mutate()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00032">arm_compute::pixel_area_c1u8_clamp()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00158">Framework::print_test_info()</a>, and <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00368">arm_compute::update_window_and_padding()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1e384f81bb641de61df2800a432c51fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e384f81bb641de61df2800a432c51fe">&#9670;&nbsp;</a></span>for_each() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utility::for_each </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call the function for each of the arguments. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Function to be called </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arg</td><td>Argument passed to the function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Remaining arguments </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00102">102</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00091">for_each()</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    func(std::forward&lt;T&gt;(arg));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a1e384f81bb641de61df2800a432c51fe">for_each</a>(std::forward&lt;F&gt;(func), std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a1e384f81bb641de61df2800a432c51fe"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a1e384f81bb641de61df2800a432c51fe">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;... args)</div><div class="ttdoc">Call the function for each of the arguments. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00102">Utility.h:102</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab7c665e19081aef1a68ec0090b4c7be6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7c665e19081aef1a68ec0090b4c7be6">&#9670;&nbsp;</a></span>make_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;typename std::iterator_traits&lt;<a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a>&gt;::value_type, N&gt; arm_compute::utility::make_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a>&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_iterator.xhtml">Iterator</a>&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00070">70</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00063">arm_compute::utility::detail::make_array()</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#ab7c665e19081aef1a68ec0090b4c7be6">detail::make_array</a>(first, index_sequence_t&lt;N&gt; {});</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_ab7c665e19081aef1a68ec0090b4c7be6"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#ab7c665e19081aef1a68ec0090b4c7be6">arm_compute::utility::make_array</a></div><div class="ttdeci">std::array&lt; typename std::iterator_traits&lt; Iterator &gt;::value_type, N &gt; make_array(Iterator first, Iterator last)</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00070">Utility.h:70</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a26bf8243169fc3fd2299024c25b0aa0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26bf8243169fc3fd2299024c25b0aa0d">&#9670;&nbsp;</a></span>saturate_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::utility::saturate_cast </td>
          <td>(</td>
          <td class="paramtype">U&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type cast with saturation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Value of type U to cast.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Original value clamped to numeric limits of T and converted to type T.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Numeric limits of T must be representable without loss in type U. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00140">140</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00084">clamp()</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00320">arm_compute::support::cpp11::lowest()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_softmax_layer_kernel_8cpp_source.xhtml#l00486">NELogits1DMaxKernel::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> low  = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>());</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> high = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a><span class="keyword">&gt;</span>(std::numeric_limits&lt;T&gt;::max());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">clamp</a>(val, low, high));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a12c3c62f510452805c289e180ec78bb7"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a12c3c62f510452805c289e180ec78bb7">arm_compute::utility::clamp</a></div><div class="ttdeci">T clamp(const T &amp;n, const T &amp;lower, const T &amp;upper)</div><div class="ttdoc">Performs clamping among a lower and upper value. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00084">Utility.h:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00320">ToolchainSupport.h:320</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c1a72cd100958036bb59f0625f0613f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c1a72cd100958036bb59f0625f0613f">&#9670;&nbsp;</a></span>sort_indices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;size_t&gt; arm_compute::utility::sort_indices </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform an index sort of a given vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> to sort</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Sorted index vector. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00154">154</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    std::vector&lt;size_t&gt; idx(v.size());</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::iota(idx.begin(), idx.end(), 0);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::sort(idx.begin(), idx.end(),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;              [&amp;v](<span class="keywordtype">size_t</span> i1, <span class="keywordtype">size_t</span> i2)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">return</span> v[i1] &lt; v[i2];</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    });</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> idx;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abb96ad5c7071ec3a47ea5f07e817a636"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb96ad5c7071ec3a47ea5f07e817a636">&#9670;&nbsp;</a></span>tolower()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::utility::tolower </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>string</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string to lower case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">string</td><td>To be converted string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Lower case string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_utility_8h_source.xhtml#l00202">202</a> of file <a class="el" href="_utility_8h_source.xhtml">Utility.h</a>.</p>

<p class="reference">References <a class="el" href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00092">arm_compute::test::validation::c</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_warp_perspective_kernel_8cpp_source.xhtml#l00061">CLWarpPerspectiveKernel::configure()</a>, <a class="el" href="_c_l_warp_affine_kernel_8cpp_source.xhtml#l00061">CLWarpAffineKernel::configure()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00161">CLScaleKernel::configure()</a>, <a class="el" href="_g_c_scale_kernel_8cpp_source.xhtml#l00047">GCScaleKernel::configure()</a>, <a class="el" href="_c_l_non_linear_filter_kernel_8cpp_source.xhtml#l00056">CLNonLinearFilterKernel::configure()</a>, <a class="el" href="_c_l_remap_kernel_8cpp_source.xhtml#l00050">CLRemapKernel::configure()</a>, <a class="el" href="_type_loader_8cpp_source.xhtml#l00051">arm_compute::data_layout_from_name()</a>, <a class="el" href="_type_loader_8cpp_source.xhtml#l00032">arm_compute::data_type_from_name()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00317">arm_compute::lower_string()</a>, and <a class="el" href="_type_loader_8cpp_source.xhtml#l00070">arm_compute::graph::target_from_name()</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    std::transform(<span class="keywordtype">string</span>.begin(), <span class="keywordtype">string</span>.end(), <span class="keywordtype">string</span>.begin(), [](<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a497347573faa3778743ddf277f861094">c</a>)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">std::tolower</a>(c);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    });</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> string;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00202">Utility.h:202</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a497347573faa3778743ddf277f861094"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a497347573faa3778743ddf277f861094">arm_compute::test::validation::c</a></div><div class="ttdeci">CLTensor c</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00092">GEMM.cpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utility.xhtml">utility</a></li>
    <li class="footer">Generated on Thu Nov 22 2018 11:57:52 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
