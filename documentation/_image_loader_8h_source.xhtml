<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/ImageLoader.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_image_loader_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ImageLoader.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_image_loader_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __UTILS_IMAGE_LOADER_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __UTILS_IMAGE_LOADER_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_utils_8h.xhtml">utils/Utils.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#pragma GCC diagnostic push</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wswitch-default&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="_image_loader_8h.xhtml#a18372412ad2fc3ce1e3240b3cf0efe78">   36</a></span>&#160;<span class="preprocessor">#define STB_IMAGE_IMPLEMENTATION</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;stb/stb_image.h&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#pragma GCC diagnostic pop</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>utils</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml">   49</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml">IImageDataFeeder</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml#aa83bce0f78d159e993775ee2a1bdf116">~IImageDataFeeder</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">virtual</span> uint8_t <span class="keyword">get</span>() = 0;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml#a352ac249fbff257dddef6eb8792cd648">get_row</a>(uint8_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keywordtype">size_t</span> row_size) = 0;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;};</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml">   64</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml">FileImageFeeder</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml">IImageDataFeeder</a></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#a72f5e7f7f675855cd757c284c3767b0f">   71</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#a72f5e7f7f675855cd757c284c3767b0f">FileImageFeeder</a>(std::ifstream &amp;fs)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        : _fs(fs)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Inherited overridden methods</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#a7c390fc2fcfbbd7af032f03d0750d494">   76</a></span>&#160;    uint8_t <span class="keyword">get</span>() <span class="keyword">override</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> _fs.get();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#aa3dfd581be9d71ccba4e1b03ecc0d684">   80</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#aa3dfd581be9d71ccba4e1b03ecc0d684">get_row</a>(uint8_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keywordtype">size_t</span> row_size)<span class="keyword"> override</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        _fs.read(reinterpret_cast&lt;std::fstream::char_type *&gt;(dst), row_size);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::ifstream &amp;_fs;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">   90</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml">IImageDataFeeder</a></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#a364ebbb0c2f56d789b5bf14308784282">   97</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#a364ebbb0c2f56d789b5bf14308784282">MemoryImageFeeder</a>(<span class="keyword">const</span> uint8_t *data)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        : _data(data)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a>(<a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> &amp;operator=(<a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// Inherited overridden methods</span></div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#a7c390fc2fcfbbd7af032f03d0750d494">  110</a></span>&#160;    uint8_t <span class="keyword">get</span>() <span class="keyword">override</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">return</span> *_data++;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#aa3dfd581be9d71ccba4e1b03ecc0d684">  114</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#aa3dfd581be9d71ccba4e1b03ecc0d684">get_row</a>(uint8_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keywordtype">size_t</span> row_size)<span class="keyword"> override</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        memcpy(dst, _data, row_size);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        _data += row_size;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> uint8_t *_data;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;};</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">  126</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a76b531ca14f333b04c1d97042dd73c16">  130</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a76b531ca14f333b04c1d97042dd73c16">IImageLoader</a>()</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        : _feeder(nullptr), _width(0), _height(0)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">virtual</span> ~<a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7b736ec9a05be5c498760d35a0406ed3">  137</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7b736ec9a05be5c498760d35a0406ed3">width</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> _width;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#aa420a28166e708e3f8b9ecc8e527fc09">  142</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#aa420a28166e708e3f8b9ecc8e527fc09">height</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">return</span> _height;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> is_open() = 0;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> open(<span class="keyword">const</span> std::string &amp;filename) = 0;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> close() = 0;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a283b961e6ca7b117b106c8710c7cfe81">  161</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a283b961e6ca7b117b106c8710c7cfe81">init_image</a>(T &amp;image, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!is_open());</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(format != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a> &amp;&amp; format != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// Use the size of the input image</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> image_info(_width, _height, format);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        image.allocator()-&gt;init(image_info);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a1672610b872bef30d0dc2333a0ffc402">  177</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a1672610b872bef30d0dc2333a0ffc402">fill_image</a>(T &amp;image)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!is_open());</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(image.info()-&gt;dimension(0) != _width || image.info()-&gt;dimension(1) != _height);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <a class="code" href="_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a>(&amp;image, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_feeder.get() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="comment">// Map buffer if creating a CLTensor/GCTensor</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(image, <span class="keyword">true</span>);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// Validate feeding data</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            validate_info(image.info());</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">switch</span>(image.info()-&gt;format())</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="comment">// We need to convert the data from RGB to grayscale:</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="comment">// Iterate through every pixel of the image</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _width, 1));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _height, 1));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a>(&amp;image, window);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> red   = 0;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> green = 0;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> blue  = 0;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        red   = _feeder-&gt;get();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                        green = _feeder-&gt;get();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        blue  = _feeder-&gt;get();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        *out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() = 0.2126f * red + 0.7152f * green + 0.0722f * blue;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    },</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>:</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="comment">// There is no format conversion needed: we can simply copy the content of the input file to the image one row at the time.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="comment">// Create a vertical window to iterate through the image&#39;s rows:</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _height, 1));</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a>(&amp;image, window);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keywordtype">size_t</span>   row_size = _width * image.info()-&gt;element_size();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        _feeder-&gt;get_row(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>(), row_size);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    },</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported format&quot;</span>);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="comment">// Unmap buffer if creating a CLTensor/GCTensor</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(image);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Loading image file: %s&quot;</span>, e.what());</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7c3f70e1caee95bb95c62346e130e5ab">  257</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7c3f70e1caee95bb95c62346e130e5ab">fill_planar_tensor</a>(T &amp;tensor, <span class="keywordtype">bool</span> bgr = <span class="keyword">false</span>)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!is_open());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <a class="code" href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;tensor, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">data_layout</a>  = tensor.info()-&gt;data_layout();</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> tensor_shape = tensor.info()-&gt;tensor_shape();</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tensor_shape);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor_shape[<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>)] != _width);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor_shape[<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>)] != _height);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor_shape[<a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>)] != 3);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_feeder.get() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="comment">// Map buffer if creating a CLTensor</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(tensor, <span class="keyword">true</span>);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="comment">// Validate feeding data</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            validate_info(tensor.info());</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="comment">// Stride across channels</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordtype">size_t</span> stride_z = 0;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="comment">// Iterate through every pixel of the image</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keywordflow">if</span>(data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _width, 1));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _height, 1));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                stride_z = tensor.info()-&gt;strides_in_bytes()[2];</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _width, 1));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, _height, 1));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                stride_z = tensor.info()-&gt;strides_in_bytes()[0];</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a>(&amp;tensor, window);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> red   = 0;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> green = 0;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> blue  = 0;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                red   = _feeder-&gt;get();</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                green = _feeder-&gt;get();</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                blue  = _feeder-&gt;get();</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keywordflow">switch</span>(tensor.info()-&gt;data_type())</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        *(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() + 0 * stride_z) = bgr ? blue : red;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        *(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() + 1 * stride_z) = green;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                        *(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() + 2 * stride_z) = bgr ? red : blue;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                        *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() + 0 * stride_z) = static_cast&lt;float&gt;(bgr ? blue : red);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                        *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() + 1 * stride_z) = static_cast&lt;float&gt;(green);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">ptr</a>() + 2 * stride_z) = static_cast&lt;float&gt;(bgr ? red : blue);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type&quot;</span>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            },</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">out</a>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="comment">// Unmap buffer if creating a CLTensor</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(tensor);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Loading image file: %s&quot;</span>, e.what());</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> validate_info(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    std::unique_ptr&lt;IImageDataFeeder&gt; _feeder;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      _width;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      _height;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;};</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">  358</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">PPMLoader</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;{</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a49afa04c8a5fd9ead48e07440b37294c">  362</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a49afa04c8a5fd9ead48e07440b37294c">PPMLoader</a>()</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        : <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a>(), _fs()</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab1d89f579133c9b6779d43f4a1489874">  368</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab1d89f579133c9b6779d43f4a1489874">is_open</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">return</span> _fs.is_open();</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">  372</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">open</a>(<span class="keyword">const</span> std::string &amp;filename)<span class="keyword"> override</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(is_open());</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            _fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            _fs.open(filename, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">std::ios::in</a> | std::ios::binary);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_val = 0;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            std::tie(_width, _height, max_val) = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3aa8f5f1b94f88fdf5b43a53e29379cf">parse_ppm_header</a>(_fs);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(max_val &gt;= 256, <span class="stringliteral">&quot;2 bytes per colour channel not supported in file %s&quot;</span>,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                     filename.c_str());</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            _feeder = support::cpp14::make_unique&lt;FileImageFeeder&gt;(_fs);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">catch</span>(std::runtime_error &amp;e)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, filename.c_str(), e.what());</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a7008bca493d69ea65f12e0940f3a6886">  393</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a7008bca493d69ea65f12e0940f3a6886">close</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">if</span>(is_open())</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            _fs.close();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            _feeder = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(is_open());</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordtype">void</span> validate_info(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info)<span class="keyword"> override</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="comment">// Check if the file is large enough to fill the image</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> current_position = _fs.tellg();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        _fs.seekg(0, std::ios_base::end);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> end_position = _fs.tellg();</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        _fs.seekg(current_position, std::ios_base::beg);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>((end_position - current_position) &lt; tensor_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>(),</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                 <span class="stringliteral">&quot;Not enough data in file&quot;</span>);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(end_position);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    std::ifstream _fs;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;};</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml">  423</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml">JPEGLoader</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;{</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">struct </span>malloc_deleter</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordtype">void</span> operator()(uint8_t *p)<span class="keyword"> const</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            free(p);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    };</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#aaeaba79f8d6db5662a2add16348ea2a3">  437</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#aaeaba79f8d6db5662a2add16348ea2a3">JPEGLoader</a>()</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        : <a class="code" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a>(), _is_loaded(false), _data(nullptr)</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    {</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    }</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab1d89f579133c9b6779d43f4a1489874">  443</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab1d89f579133c9b6779d43f4a1489874">is_open</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">return</span> _is_loaded;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">  447</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">open</a>(<span class="keyword">const</span> std::string &amp;filename)<span class="keyword"> override</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordtype">int</span>      bpp, width, height;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        uint8_t *rgb_image = stbi_load(filename.c_str(), &amp;width, &amp;height, &amp;bpp, 3);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keywordflow">if</span>(rgb_image == NULL)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Accessing %s failed&quot;</span>, filename.c_str());</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        }</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            _width     = width;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            _height    = height;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            _data      = std::unique_ptr&lt;uint8_t, malloc_deleter&gt;(rgb_image);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            _is_loaded = <span class="keyword">true</span>;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            _feeder    = support::cpp14::make_unique&lt;MemoryImageFeeder&gt;(_data.get());</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div><div class="line"><a name="l00464"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#a7008bca493d69ea65f12e0940f3a6886">  464</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#a7008bca493d69ea65f12e0940f3a6886">close</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">if</span>(is_open())</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            _width  = 0;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            _height = 0;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            release();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(is_open());</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    }</div><div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#a23b477d0e2d399f75d585d154c346591">  475</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#a23b477d0e2d399f75d585d154c346591">release</a>()</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">if</span>(_is_loaded)</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            _data.reset();</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            _is_loaded = <span class="keyword">false</span>;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            _feeder    = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        }</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordtype">bool</span> _is_loaded;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    std::unique_ptr&lt;uint8_t, malloc_deleter&gt; _data;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;};</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml">  491</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml">ImageLoaderFactory</a> final</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00500"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml#ada8c92fe057e34525e7f8c4e8e422179">  500</a></span>&#160;    <span class="keyword">static</span> std::unique_ptr&lt;IImageLoader&gt; <a class="code" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml#ada8c92fe057e34525e7f8c4e8e422179">create</a>(<span class="keyword">const</span> std::string &amp;filename)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a> type = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a779702024b509e6797b2d526d382cf65">arm_compute::utils::get_image_type_from_file</a>(filename);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">ImageType::PPM</a>:</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="keywordflow">return</span> support::cpp14::make_unique&lt;PPMLoader&gt;();</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">ImageType::JPEG</a>:</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="keywordflow">return</span> support::cpp14::make_unique&lt;JPEGLoader&gt;();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3">ImageType::UNKNOWN</a>:</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;};</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;} <span class="comment">// namespace utils</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __UTILS_IMAGE_LOADER_H__*/</span><span class="preprocessor"></span></div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00261">Error.h:261</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_data_feeder_xhtml_a352ac249fbff257dddef6eb8792cd648"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml#a352ac249fbff257dddef6eb8792cd648">arm_compute::utils::IImageDataFeeder::get_row</a></div><div class="ttdeci">virtual void get_row(uint8_t *dst, size_t row_size)=0</div><div class="ttdoc">Feed a whole row to a destination pointer. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_a7008bca493d69ea65f12e0940f3a6886"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a7008bca493d69ea65f12e0940f3a6886">arm_compute::utils::PPMLoader::close</a></div><div class="ttdeci">void close() override</div><div class="ttdoc">Closes an image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00393">ImageLoader.h:393</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml">arm_compute::utils::JPEGLoader</a></div><div class="ttdoc">Class to load the content of a JPEG file into an Image. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00423">ImageLoader.h:423</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_memory_image_feeder_xhtml_a364ebbb0c2f56d789b5bf14308784282"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#a364ebbb0c2f56d789b5bf14308784282">arm_compute::utils::MemoryImageFeeder::MemoryImageFeeder</a></div><div class="ttdeci">MemoryImageFeeder(const uint8_t *data)</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00097">ImageLoader.h:97</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_ab23b23a466d459ecbad7d046bb085324"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">arm_compute::utils::PPMLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;filename) override</div><div class="ttdoc">Open an image file and reads its metadata (Width, height) </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00372">ImageLoader.h:372</a></div></div>
<div class="ttc" id="utils_2_utils_8h_xhtml"><div class="ttname"><a href="utils_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="_validate_8h_xhtml_a0d34a8aa07600727e4e5034c7cdad47d"><div class="ttname"><a href="_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00642">Validate.h:642</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad366eaa4cf2d106037d91c30795a5c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad366eaa4cf2d106037d91c30795a5c76">arm_compute::test::validation::in</a></div><div class="ttdeci">CLTensor in</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00241">Winograd.cpp:241</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a786677cbfb3f5677b4d84f3056eb08db"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00227">Winograd.cpp:227</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00068">Window.h:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_image_loader_factory_xhtml_ada8c92fe057e34525e7f8c4e8e422179"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml#ada8c92fe057e34525e7f8c4e8e422179">arm_compute::utils::ImageLoaderFactory::create</a></div><div class="ttdeci">static std::unique_ptr&lt; IImageLoader &gt; create(const std::string &amp;filename)</div><div class="ttdoc">Create an image loader depending on the image type. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00500">ImageLoader.h:500</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">arm_compute::utils::IImageLoader</a></div><div class="ttdoc">Image loader interface. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00126">ImageLoader.h:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a7c3f70e1caee95bb95c62346e130e5ab"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7c3f70e1caee95bb95c62346e130e5ab">arm_compute::utils::IImageLoader::fill_planar_tensor</a></div><div class="ttdeci">void fill_planar_tensor(T &amp;tensor, bool bgr=false)</div><div class="ttdoc">Fill a tensor with 3 planes (one for each channel) with the content of the currently open image file...</div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00257">ImageLoader.h:257</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a76b531ca14f333b04c1d97042dd73c16"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a76b531ca14f333b04c1d97042dd73c16">arm_compute::utils::IImageLoader::IImageLoader</a></div><div class="ttdeci">IImageLoader()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00130">ImageLoader.h:130</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml_aaeaba79f8d6db5662a2add16348ea2a3"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#aaeaba79f8d6db5662a2add16348ea2a3">arm_compute::utils::JPEGLoader::JPEGLoader</a></div><div class="ttdeci">JPEGLoader()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00437">ImageLoader.h:437</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_ab1d89f579133c9b6779d43f4a1489874"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#ab1d89f579133c9b6779d43f4a1489874">arm_compute::utils::PPMLoader::is_open</a></div><div class="ttdeci">bool is_open() override</div><div class="ttdoc">Return true if the image file is currently open. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00368">ImageLoader.h:368</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_aeabcf37a281d780c90ebe812149a7a84"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#aeabcf37a281d780c90ebe812149a7a84">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const </div><div class="ttdoc">Return a pointer to the current pixel. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00184">Helpers.inl:184</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">3 channels, 1 U8 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00050">Types.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_aa420a28166e708e3f8b9ecc8e527fc09"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#aa420a28166e708e3f8b9ecc8e527fc09">arm_compute::utils::IImageLoader::height</a></div><div class="ttdeci">unsigned int height() const </div><div class="ttdoc">Return the height of the currently open image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00142">ImageLoader.h:142</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00122">Helpers.inl:122</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_file_image_feeder_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml">arm_compute::utils::FileImageFeeder</a></div><div class="ttdoc">File Image feeder concrete implementation. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00064">ImageLoader.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_image_loader_factory_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml">arm_compute::utils::ImageLoaderFactory</a></div><div class="ttdoc">Factory for generating appropriate image loader. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00491">ImageLoader.h:491</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af8a8a0625e7981212a0af48deb9d2a09"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af8a8a0625e7981212a0af48deb9d2a09">arm_compute::test::validation::out</a></div><div class="ttdeci">CLTensor out</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00242">Winograd.cpp:242</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_memory_image_feeder_xhtml_aa3dfd581be9d71ccba4e1b03ecc0d684"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#aa3dfd581be9d71ccba4e1b03ecc0d684">arm_compute::utils::MemoryImageFeeder::get_row</a></div><div class="ttdeci">void get_row(uint8_t *dst, size_t row_size) override</div><div class="ttdoc">Feed a whole row to a destination pointer. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00114">ImageLoader.h:114</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_division_8cpp_source.xhtml#l00100">ArithmeticDivision.cpp:100</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00041">Window.inl:41</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">arm_compute::utils::ImageType::PPM</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_data_feeder_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml">arm_compute::utils::IImageDataFeeder</a></div><div class="ttdoc">Image feeder interface. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00049">ImageLoader.h:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_memory_image_feeder_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">arm_compute::utils::MemoryImageFeeder</a></div><div class="ttdoc">Memory Image feeder concrete implementation. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00090">ImageLoader.h:90</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00737">Validate.h:737</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a1672610b872bef30d0dc2333a0ffc402"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a1672610b872bef30d0dc2333a0ffc402">arm_compute::utils::IImageLoader::fill_image</a></div><div class="ttdeci">void fill_image(T &amp;image)</div><div class="ttdoc">Fill an image with the content of the currently open image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00177">ImageLoader.h:177</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_file_image_feeder_xhtml_aa3dfd581be9d71ccba4e1b03ecc0d684"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#aa3dfd581be9d71ccba4e1b03ecc0d684">arm_compute::utils::FileImageFeeder::get_row</a></div><div class="ttdeci">void get_row(uint8_t *dst, size_t row_size) override</div><div class="ttdoc">Feed a whole row to a destination pointer. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00080">ImageLoader.h:80</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml_ab1d89f579133c9b6779d43f4a1489874"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab1d89f579133c9b6779d43f4a1489874">arm_compute::utils::JPEGLoader::is_open</a></div><div class="ttdeci">bool is_open() override</div><div class="ttdoc">Return true if the image file is currently open. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00443">ImageLoader.h:443</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_data_feeder_xhtml_aa83bce0f78d159e993775ee2a1bdf116"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml#aa83bce0f78d159e993775ee2a1bdf116">arm_compute::utils::IImageDataFeeder::~IImageDataFeeder</a></div><div class="ttdeci">virtual ~IImageDataFeeder()=default</div><div class="ttdoc">Virtual base destructor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00201">Utils.h:201</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml_a7008bca493d69ea65f12e0940f3a6886"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#a7008bca493d69ea65f12e0940f3a6886">arm_compute::utils::JPEGLoader::close</a></div><div class="ttdeci">void close() override</div><div class="ttdoc">Closes an image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00464">ImageLoader.h:464</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_file_image_feeder_xhtml_a72f5e7f7f675855cd757c284c3767b0f"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#a72f5e7f7f675855cd757c284c3767b0f">arm_compute::utils::FileImageFeeder::FileImageFeeder</a></div><div class="ttdeci">FileImageFeeder(std::ifstream &amp;fs)</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00071">ImageLoader.h:71</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">arm_compute::utils::ImageType</a></div><div class="ttdeci">ImageType</div><div class="ttdoc">Supported image types. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00059">Utils.h:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">arm_compute::utils::ImageType::JPEG</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3aa8f5f1b94f88fdf5b43a53e29379cf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3aa8f5f1b94f88fdf5b43a53e29379cf">arm_compute::utils::parse_ppm_header</a></div><div class="ttdeci">std::tuple&lt; unsigned int, unsigned int, int &gt; parse_ppm_header(std::ifstream &amp;fs)</div><div class="ttdoc">Parse the ppm header from an input file stream. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00183">Utils.cpp:183</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a4eaec01ba2c12093db609d1034ad0bc1"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const </div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00171">TensorShape.h:171</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a779702024b509e6797b2d526d382cf65"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a779702024b509e6797b2d526d382cf65">arm_compute::utils::get_image_type_from_file</a></div><div class="ttdeci">ImageType get_image_type_from_file(const std::string &amp;filename)</div><div class="ttdoc">Gets image type given a file. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml_a49afa04c8a5fd9ead48e07440b37294c"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#a49afa04c8a5fd9ead48e07440b37294c">arm_compute::utils::PPMLoader::PPMLoader</a></div><div class="ttdeci">PPMLoader()</div><div class="ttdoc">Default Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00362">ImageLoader.h:362</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::utils::ImageType::UNKNOWN</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a7b736ec9a05be5c498760d35a0406ed3"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a7b736ec9a05be5c498760d35a0406ed3">arm_compute::utils::IImageLoader::width</a></div><div class="ttdeci">unsigned int width() const </div><div class="ttdoc">Return the width of the currently open image file. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00137">ImageLoader.h:137</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00284">Helpers.h:284</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">Supported tensor data layouts. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00107">Types.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_i_image_loader_xhtml_a283b961e6ca7b117b106c8710c7cfe81"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#a283b961e6ca7b117b106c8710c7cfe81">arm_compute::utils::IImageLoader::init_image</a></div><div class="ttdeci">void init_image(T &amp;image, Format format)</div><div class="ttdoc">Initialise an image&amp;#39;s metadata with the dimensions of the image file currently open. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00161">ImageLoader.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_p_p_m_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">arm_compute::utils::PPMLoader</a></div><div class="ttdoc">PPM Image loader concrete implementation. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00358">ImageLoader.h:358</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml_ab23b23a466d459ecbad7d046bb085324"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#ab23b23a466d459ecbad7d046bb085324">arm_compute::utils::JPEGLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;filename) override</div><div class="ttdoc">Open an image file and reads its metadata (Width, height) </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00447">ImageLoader.h:447</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_j_p_e_g_loader_xhtml_a23b477d0e2d399f75d585d154c346591"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#a23b477d0e2d399f75d585d154c346591">arm_compute::utils::JPEGLoader::release</a></div><div class="ttdeci">void release()</div><div class="ttdoc">Explicitly Releases the memory of the loaded data. </div><div class="ttdef"><b>Definition:</b> <a href="_image_loader_8h_source.xhtml#l00475">ImageLoader.h:475</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="_image_loader_8h.xhtml">ImageLoader.h</a></li>
    <li class="footer">Generated on Wed Aug 29 2018 15:31:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
